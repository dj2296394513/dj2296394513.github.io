{
    "version": "https://jsonfeed.org/version/1",
    "title": "扯淡的小情绪",
    "subtitle": "subtitle",
    "icon": "http://www.dgredamancy.com/images/favicon.ico",
    "description": "一个奋斗的小青年",
    "home_page_url": "http://www.dgredamancy.com",
    "items": [
        {
            "id": "http://www.dgredamancy.com/posts/caff8000/index.html",
            "url": "http://www.dgredamancy.com/posts/caff8000/index.html",
            "title": "Git常用命令",
            "date_published": "2020-10-31T06:37:18.000Z",
            "content_html": "<h3 id=\"git常用命令\"><a class=\"anchor\" href=\"#git常用命令\">#</a> Git 常用命令</h3>\n<h4 id=\"下载\"><a class=\"anchor\" href=\"#下载\">#</a> 下载</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">Git 下载地址</span></p>\n<p> </p>\n<h4 id=\"git使用教程\"><a class=\"anchor\" href=\"#git使用教程\">#</a> git 使用教程</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lKRzdEMzE0L2FydGljbGUvZGV0YWlscy8xMDQ1NTE4OTY=\">参考大佬 git 使用教程</span></p>\n<p> </p>\n<h4 id=\"工作区-暂存区和版本库\"><a class=\"anchor\" href=\"#工作区-暂存区和版本库\">#</a> 工作区、暂存区和版本库</h4>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/31/BNzvVI.jpg\" alt=\"QQæªå¾20201031092826\" /></p>\n<ul>\n<li>\n<p><code>工作区</code> ：当前电脑里能看到的目录。</p>\n</li>\n<li>\n<p><code>暂存区</code> ：英文叫做 stage 或 index。一般存放在 “git 目录下” 下的 index 文件 (.git/index) 中，所以我们把暂存区有时也叫作索引 ( index)。</p>\n</li>\n<li>\n<p><code>版本库</code> ：工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</p>\n</li>\n</ul>\n<p> </p>\n<h4 id=\"git架构图\"><a class=\"anchor\" href=\"#git架构图\">#</a> Git 架构图</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/31/ac98406baa173d1e38b6fcfff2718e58.png\" alt=\"\" /></p>\n<p> </p>\n<h4 id=\"git常用命令-2\"><a class=\"anchor\" href=\"#git常用命令-2\">#</a> Git 常用命令</h4>\n<blockquote>\n<p>master : 默认开发分支</p>\n<p>Head : 默认开发分支</p>\n<p>origin : 默认远程版本库</p>\n<p>Head^ : Head 的父提交</p>\n</blockquote>\n<ul>\n<li>创建版本库</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git clone <url></td>\n<td style=\"text-align:center\">克隆远程版本库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git init</td>\n<td style=\"text-align:center\">初始化本地版本库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git init [project-name]</td>\n<td style=\"text-align:center\">新建一个目录，将其初始化为 Git 代码库</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>修改和提交</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git status</td>\n<td style=\"text-align:center\">查看状态</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git diff</td>\n<td style=\"text-align:center\">查看变更内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git add .</td>\n<td style=\"text-align:center\">跟踪所有改动过的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git add <file></td>\n<td style=\"text-align:center\">跟踪指定的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git mv <old> <new></td>\n<td style=\"text-align:center\">文件改名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rm <file></td>\n<td style=\"text-align:center\">删除文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rm --cached <file></td>\n<td style=\"text-align:center\">停止跟踪文件但不删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git commit -m “提交的备注信息”</td>\n<td style=\"text-align:center\">提交所有更新过的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git commit -a</td>\n<td style=\"text-align:center\">提交工作区自上次 commit 之后的变化，直接到仓库区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git commit -v</td>\n<td style=\"text-align:center\">提交时显示所有 diff 信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git commit --amend</td>\n<td style=\"text-align:center\">修改最后一次提交</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>查看提交历史</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git log</td>\n<td style=\"text-align:center\">查看提交历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git log -p <file></td>\n<td style=\"text-align:center\">查看指定文件的提交历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gie blame <file></td>\n<td style=\"text-align:center\">以列表方式查看指定文件的提交历史</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>撤回</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git reset --hard HEAD</td>\n<td style=\"text-align:center\">撤销工作目录中所有未提交文件的修改内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout HEAD <file></td>\n<td style=\"text-align:center\">撤销指定的未提交文件的修改内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git revert <commit></td>\n<td style=\"text-align:center\">撤销指定的提交</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>分支与标签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git branch</td>\n<td style=\"text-align:center\">显示所有本地分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch -r</td>\n<td style=\"text-align:center\">显示所有远程分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch -a</td>\n<td style=\"text-align:center\">列出素有本地分支和远程分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git checkout &lt;branch/tag&gt;</td>\n<td style=\"text-align:center\">切换到指定分支或标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch <new-branch></td>\n<td style=\"text-align:center\">创建新分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch -d <branch></td>\n<td style=\"text-align:center\">删除本地分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git tag</td>\n<td style=\"text-align:center\">列出所有本地标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git tag <tagname></td>\n<td style=\"text-align:center\">基于最新提交创建标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git tag -d <tagname></td>\n<td style=\"text-align:center\">删除标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git show [tag]</td>\n<td style=\"text-align:center\">查看 tag 信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git push [remote] [tag]</td>\n<td style=\"text-align:center\">提交指定 tag</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>合并与衍合</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git merge <branch></td>\n<td style=\"text-align:center\">合并指定分支到当前分支</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rebase <branch></td>\n<td style=\"text-align:center\">衍合指定分支到当前分支</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>远程操作</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git remote -v</td>\n<td style=\"text-align:center\">查看远程版本库信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git remote show <remote></td>\n<td style=\"text-align:center\">查看指定远程版本库信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git remote add <remote> <url></td>\n<td style=\"text-align:center\">添加远程版本库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git fetch <remote></td>\n<td style=\"text-align:center\">从远程库获取代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git pull <remote> <branch></td>\n<td style=\"text-align:center\">下载代码及快速合并</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git push <remote> <branch></td>\n<td style=\"text-align:center\">上床代码及快速合并</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git push <remote> :&lt;branch/tag-name&gt;</td>\n<td style=\"text-align:center\">删除远程分支或标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git push --tags</td>\n<td style=\"text-align:center\">上传所有标签</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<h4 id=\"思维导图笔记\"><a class=\"anchor\" href=\"#思维导图笔记\">#</a> 思维导图笔记</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/31/b2fcc4e9cd0884234837c290cdf62d98.png\" alt=\"\" /></p>\n",
            "tags": [
                "其他",
                "git",
                "基本操作"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/2b2f44ba/index.html",
            "url": "http://www.dgredamancy.com/posts/2b2f44ba/index.html",
            "title": "前端模块化",
            "date_published": "2020-10-29T06:51:32.000Z",
            "content_html": "<h3 id=\"前端模块化\"><a class=\"anchor\" href=\"#前端模块化\">#</a> 前端模块化</h3>\n<h4 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h4>\n<hr />\n<p>前端开发领域发展到目前阶段:</p>\n<ul>\n<li>零件化 - 最终呈现给用户是一个完整的产品 (由各个零件组成的)\n<ul>\n<li>降低生产成本 – 多人协作 (每个人各司其职)</li>\n<li>降低使用成本 - 各个零件之间是低耦合的</li>\n</ul>\n</li>\n<li>组件化 - 将一个完整的产品划分成各个组件\n<ul>\n<li>前端开发中更多是指 HTML 页面和 CSs 样式</li>\n</ul>\n</li>\n<li>模块化 - 将一个完整的产品划分成各个模块\n<ul>\n<li>前端开发中更多是指 JavaScript 逻辑</li>\n</ul>\n</li>\n<li>组件化与模块化的关系\n<ol>\n<li>将一个完整的产品，划分成若干的组件</li>\n<li>将每一个组件划分成若干的模块</li>\n</ol>\n</li>\n<li>组件化与模块化的特点\n<ol>\n<li>是低耦合的 - 软件开发的统一原则</li>\n<li>是热插拔的 - 指的是需要时使用，不需要是去掉</li>\n</ol>\n</li>\n</ul>\n<hr />\n<p> </p>\n<h4 id=\"前端模块化是什么\"><a class=\"anchor\" href=\"#前端模块化是什么\">#</a> 前端模块化是什么</h4>\n<p>所谓模块化，就是指根据功能的不同进行划分，每个功能就是一个模块。最终，一个完整的产品是由各个模块组合而成的。</p>\n<p><strong>特点</strong>:</p>\n<ul>\n<li><code>独立性</code>  - 可以针对一个模块单独进行设计、研发，相对工作量和难度变小。</li>\n<li><code>复用性</code>  - 一些通用模块 (例如登录或注册) 可以被重复使用，而不用每次重新开发。</li>\n<li><code>解耦性</code>  - 模块与模块之间，将相互影响降到最低，使得更换、升级或添加某个模块，不影响其他模块的工作。</li>\n<li><code>灵活性  </code>  - 通过选择和组合不同的模块，可以快速构建一个新的产品。</li>\n</ul>\n<p> </p>\n<h4 id=\"ecmascript-5的模块化\"><a class=\"anchor\" href=\"#ecmascript-5的模块化\">#</a> ECMAScript 5 的模块化</h4>\n<h5 id=\"没有模块化概念\"><a class=\"anchor\" href=\"#没有模块化概念\">#</a> 没有模块化概念</h5>\n<p><code>无模块化概念</code></p>\n<p> </p>\n<h5 id=\"函数的封装\"><a class=\"anchor\" href=\"#函数的封装\">#</a> 函数的封装</h5>\n<p>函数的定义可以将代码逻辑封装在指定的函数作用域中</p>\n<blockquote>\n<p>无法在全局作用域再定义一个 outer () 函数</p>\n</blockquote>\n<p> </p>\n<h5 id=\"对象的定义\"><a class=\"anchor\" href=\"#对象的定义\">#</a> 对象的定义</h5>\n<p>使用对象实现的好处:</p>\n<ul>\n<li>解决了全局命名空间可能出现的冲突问题。因为所有的模块成员都是作为一个对象的属性或方法存在的。</li>\n<li>模块成员之间也存在着某种关系。因为被定义在同一个 JavaScript 对象中，作为属性或方法存在。而这个对象名成为了所有模块成员对外的一个统一的模块名称。</li>\n</ul>\n<p> </p>\n<h5 id=\"自调函数\"><a class=\"anchor\" href=\"#自调函数\">#</a> 自调函数</h5>\n<p>看似引入对象概念后，这个模块的解决方案不错，但依旧存在着一些问题。对于这样一个模块（对象），是可以从外部对该模块（对象）的属性或方法进行修改的。这就导致了会产生一些意外的安全问题，而这个问题可以通过自调函数来进行解决。</p>\n<p> </p>\n<h5 id=\"最终模块化结构\"><a class=\"anchor\" href=\"#最终模块化结构\">#</a> 最终模块化结构</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> outer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token string\">'longestory'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token keyword\">interface</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token function-variable function\">getAttr</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function-variable function\">inner</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> '<span class=\"token keyword\">this</span> is inner <span class=\"token keyword\">function</span><span class=\"token punctuation\">.</span>\"<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"ecmascript-6的模块化\"><a class=\"anchor\" href=\"#ecmascript-6的模块化\">#</a> ECMAScript 6 的模块化</h4>\n<h5 id=\"ecmascript-6的模块化-2\"><a class=\"anchor\" href=\"#ecmascript-6的模块化-2\">#</a> ECMAScript 6 的模块化</h5>\n<ul>\n<li>ECMAScript 2015 的模块 <code>自动开启严格模式</code> ，即使没有写 use strict;.</li>\n<li>可以在模块中使用 import 和 export 命令。</li>\n</ul>\n<p> </p>\n<h5 id=\"export命令\"><a class=\"anchor\" href=\"#export命令\">#</a> export 命令</h5>\n<p>export 命令用于将指定的模块内容导出，该命令可以修饰在 function、var、let 或 const 等之前。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token string\">'this is string.'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token string\">'this is function.'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"import命令\"><a class=\"anchor\" href=\"#import命令\">#</a> import 命令</h5>\n<p>irmport 命令用于导入其他模块所提供的功能，</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> modulepath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>导出的名称 <span class=\"token keyword\">as</span> 别名<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">from</span> modulepath</pre></td></tr></table></figure><blockquote>\n<p>使用 import 命令导入的名称必须与模块使用 export 导出的名称一致。<br />\n使用 import 命令导入其他模块的内容时，默认使用的是模块声明的名称。也可以在导入时，进行重命名。</p>\n</blockquote>\n<p> </p>\n<h4 id=\"前端模块化规范\"><a class=\"anchor\" href=\"#前端模块化规范\">#</a> 前端模块化规范</h4>\n<ul>\n<li>CommonJS</li>\n<li>RequireJS(AMD)</li>\n<li>SeaJS(CMD)</li>\n</ul>\n<p> </p>\n<h4 id=\"requirejs\"><a class=\"anchor\" href=\"#requirejs\">#</a> RequireJS</h4>\n<h5 id=\"加载requirejs\"><a class=\"anchor\" href=\"#加载requirejs\">#</a> 加载 RequireJS</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src <span class=\"token operator\">=</span> <span class=\"token string\">'script/require.js'</span> defer async<span class=\"token operator\">=</span><span class=\"token string\">'true'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"主模块的编写\"><a class=\"anchor\" href=\"#主模块的编写\">#</a> 主模块的编写</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script data<span class=\"token operator\">-</span>main<span class=\"token operator\">=</span><span class=\"token string\">'scripts/main.js'</span> src<span class=\"token operator\">=</span><span class=\"token string\">'scripts/teauire.js'</span> defer async<span class=\"token operator\">=</span><span class=\"token string\">'true'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"定义模块\"><a class=\"anchor\" href=\"#定义模块\">#</a> 定义模块</h5>\n<ul>\n<li>健值对方式定义</li>\n<li>函数式定义</li>\n<li>存在依赖的函数式定义</li>\n</ul>\n<p> </p>\n<h5 id=\"加载模块\"><a class=\"anchor\" href=\"#加载模块\">#</a> 加载模块</h5>\n<ul>\n<li>RequireJS 使用 config () 函数对模块的加载行为进行自定义。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>reauire<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpaths<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token string\">'jquery'</span><span class=\"token operator\">:</span><span class=\"token string\">''</span>jquery<span class=\"token punctuation\">.</span>min'<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">'underscore'</span><span class=\"token operator\">:</span> <span class=\"token string\">'underscore.min'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token string\">'backbone'</span><span class=\"token operator\">:</span> <span class=\"token string\">'backbone.min'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>RequireJS 使用 require (）函数来加载指定模块。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'backbone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$<span class=\"token punctuation\">,</span>_<span class=\"token punctuation\">,</span> Backbone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// some code here</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"seajs\"><a class=\"anchor\" href=\"#seajs\">#</a> SeaJS</h4>\n<h5 id=\"加载seajs\"><a class=\"anchor\" href=\"#加载seajs\">#</a> 加载 SeaJS</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src <span class=\"token operator\">=</span> <span class=\"token string\">'script/sea.js'</span> defer async<span class=\"token operator\">=</span><span class=\"token string\">'true'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"加载模块-2\"><a class=\"anchor\" href=\"#加载模块-2\">#</a> 加载模块</h5>\n<ul>\n<li>利用 config () 方法进行配置</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//seajs 的简单配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>seajs<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tbase<span class=\"token operator\">:</span> <span class=\"token string\">'../sea-modules/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\talias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token string\">'jquery'</span><span class=\"token operator\">:</span> <span class=\"token string\">'jquery/jquery/1.10.1/jquery.js'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>利用 use () 方法加载模块</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加载入口模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>seajs<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../static/hello/src/main'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"定义模块-2\"><a class=\"anchor\" href=\"#定义模块-2\">#</a> 定义模块</h5>\n<ul>\n<li>利用 define () 方法定义模块</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 所有模块都通过 define 来定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> module</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 通过 require 引入依赖</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">var</span> Spinning <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>spinning'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 通过 exports 对外提供接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   eports<span class=\"token punctuation\">.</span>doSomething<span class=\"token operator\">=</span> <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 或者通过 module.exports 提供整个接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \tmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "ES6",
                "es6",
                "es5",
                "模块化"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/a9168bc5/index.html",
            "url": "http://www.dgredamancy.com/posts/a9168bc5/index.html",
            "title": "Class关键字",
            "date_published": "2020-10-29T02:12:38.000Z",
            "content_html": "<h3 id=\"class关键字\"><a class=\"anchor\" href=\"#class关键字\">#</a> Class 关键字</h3>\n<h4 id=\"类的声明\"><a class=\"anchor\" href=\"#类的声明\">#</a> 类的声明</h4>\n<h5 id=\"类是什么\"><a class=\"anchor\" href=\"#类是什么\">#</a> 类是什么</h5>\n<p>类作为对象的模板，只是一个 <code>语法糖</code></p>\n<p>class 关键字是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5 创建构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Hero</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">myjob</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am 教主'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//ES6 创建类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"类的声明-2\"><a class=\"anchor\" href=\"#类的声明-2\">#</a> 类的声明</h5>\n<ul>\n<li>类的声明方式</li>\n</ul>\n<p><code>class className&#123;内部结构&#125;</code></p>\n<ol>\n<li>class 关键字 - 用于创建类</li>\n<li>className - 表示创建的类名</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// Identifier 'Hero' has already been declared</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>类声明不允许再次声明已经存在的类，否则将会抛出一个类型错误。</p>\n</blockquote>\n<ul>\n<li>类的表达方式</li>\n</ul>\n<p><code>const/let/var myClass = class[className]&#123;内部结构&#125;</code></p>\n<ol>\n<li>class 关键字 - 用于创建类</li>\n<li>myClass/className - 表示创建的类名\n<ol>\n<li>myClass  - 类名，用于后面的代码逻辑进行调用</li>\n<li>className - 类名，用于当前类的内部使用的</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span>  Hero <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">hero</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// Identifier 'Hero' has already been declared</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span>  Hero <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">hero</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// Identifier 'Hero' has already been declared</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span>  Hero <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">hero</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>和函数表达式相同的一点是，类表达式可以是命名也可以是匿名的。如果是命名类表达式，这个名字只能在类体内部才能访问到。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h5>\n<blockquote>\n<p>用于创建和初始化类中创建的一个对象的一种特殊方法。</p>\n</blockquote>\n<ul>\n<li>在一个类中只能有一个名为 “constructor” 的特殊方法。一个类中出现多次构造函数 (Constructor) 方法将会抛出一个 SyntaxErcOr 错误。</li>\n<li>在一个构造方法中可以使用 super 关键字来调用一个父类的构造方法。</li>\n<li>如果没有显式指定构造方法，则会添加默认的 constructor 方法。</li>\n<li>如果不指定一个构造函数 (constructor) 方法，则使用一个默认的构造函数（ constructor )</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'张无忌'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is zhangwuji'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this is zhangwuji</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Hero &#123;name: ' 张无忌 '&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"getter与setter\"><a class=\"anchor\" href=\"#getter与setter\">#</a> getter 与 setter</h5>\n<p>与 ES5 一样，在 “类” 的内部可以使用 <code>get</code>  和  <code>set </code> 关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为</p>\n<blockquote>\n<ul>\n<li>ES5\n<ul>\n<li><code>get</code>  和 <code>set</code>  关键字在 ES5 是 <code>自己</code> 定义的</li>\n</ul>\n</li>\n<li>ES6\n<ul>\n<li><code>get</code>  和 <code>set</code>  关键字在 ES6 是 <code>内部</code> 定义的</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">getV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">set</span> <span class=\"token function\">serV</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1000</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"不允许重复声明\"><a class=\"anchor\" href=\"#不允许重复声明\">#</a> 不允许重复声明</h5>\n<ul>\n<li>声明类时，是不存在 <code>声明提前</code> 的现象的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ReferenceError: obj is not defined</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">obj</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>声明类时，是不存在 <code>重复声明</code> 的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">obj</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">obj</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">// SyntaxError: Identifier 'obj' has already been declared</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"静态方法\"><a class=\"anchor\" href=\"#静态方法\">#</a> 静态方法</h4>\n<h5 id=\"静态方法的语法\"><a class=\"anchor\" href=\"#静态方法的语法\">#</a> 静态方法的语法</h5>\n<p><code>static</code>  关键字为一个类定义了一个静态方法。</p>\n<p>静态方法不会在类的实例上被调用，相反被类本身调用。</p>\n<p><code>static 静态方法名称()&#123;方法体&#125;</code></p>\n<ul>\n<li>特点\n<ul>\n<li>静态方法是不会被添加到当前类的实例 (创建的对象) 中</li>\n</ul>\n</li>\n<li>调用\n<ul>\n<li>通过当前直接调用静态方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 Hero 类创建一个 hero 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Hero &#123;name: ' 张无忌 '&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 通过类直接调用静态方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"静态方法的调用\"><a class=\"anchor\" href=\"#静态方法的调用\">#</a> 静态方法的调用</h5>\n<ul>\n<li>从另一个静态方法调用\n<ul>\n<li>在同一个类中的一个静态方法调用另一个静态方法，可以使用 this 关键字。</li>\n</ul>\n</li>\n<li>从类的构造函数和其他方法调用<br />\n静态方法不能直接在非静态方法中使用 this 关键字来访问。\n<ul>\n<li>需要使用类名来调用：CLASSNAME.STATIC_METHOD_NAMEO</li>\n<li>将其作为构造函数的属性来调用该方法:this.constructor.STATIC_METHOD_NAME ().</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 构造器 - 创建对象时，初始化的属性和方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'张无忌'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is '</span> <span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//this is 张无忌</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 在构造器中调用静态方法的话，类名直接调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            Hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name toString:'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is sayYou'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayHe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 当前的静态方法中，调用另一个静态方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayHe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"类的继承\"><a class=\"anchor\" href=\"#类的继承\">#</a> 类的继承</h4>\n<h5 id=\"实现类的继承\"><a class=\"anchor\" href=\"#实现类的继承\">#</a> 实现类的继承</h5>\n<p><code>extends</code>  关键字用于类声明或者类表达式中，以创建一个类，该类作为另一个类的子类。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'parent'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is sayMe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is sayYou'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">staticMethod</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is static method.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 声明 Child 类时，指定 Child 类作为 Parent 类的子类</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//super -> 指向当前子类的父类的构造器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>继承的.prototype 必须是一个 Object 或者 null。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"继承于内置对象\"><a class=\"anchor\" href=\"#继承于内置对象\">#</a> 继承于内置对象</h5>\n<blockquote>\n<p>实现了继承了内置的 <code>Date</code>  对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取当前年月日</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">myDate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Date</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">getFormattedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> months <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Jan'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Feb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mar'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Apr'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'May'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jun'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Jul'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Aug'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Sep'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0ct'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nov'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dec'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> months<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getFormattedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//29-0ct-2020</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组去重</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">tochong</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">tochong</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Set &#123; 1, 2, 3, 4, 5 &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"super关键字\"><a class=\"anchor\" href=\"#super关键字\">#</a> super 关键字</h5>\n<ul>\n<li>super 关键字作为函数调用时，代表父类的构造函数。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>super 虽然代表了父类 A 的构造函数，但是返回的是子类 B 的实例，即 super 内部的 this 指的是 B，因此 super () 在这里相当于 A.prototype.constructor.call (this)。</p>\n</blockquote>\n<ul>\n<li>super 作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">surper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>由于 super 指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过 super 调用的。</p>\n</blockquote>\n",
            "tags": [
                "ES6",
                "es6",
                "类",
                "class"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/ea722411/index.html",
            "url": "http://www.dgredamancy.com/posts/ea722411/index.html",
            "title": "PotPlayer 64 bit快捷键大全",
            "date_published": "2020-10-28T11:42:41.000Z",
            "content_html": "<h2 id=\"potplayer-64-bit快捷键大全\"><a class=\"anchor\" href=\"#potplayer-64-bit快捷键大全\">#</a> PotPlayer 64 bit 快捷键大全</h2>\n<h3 id=\"前言-д-́-\"><a class=\"anchor\" href=\"#前言-д-́-\">#</a> 前言 -`д´-</h3>\n<p>最近用 <code>PotPlayer 64 bit</code> , 在不知道的情况下视频翻转一下或者各种奇葩样子，总归一句话，<strong> 弄不好了 (눈_눈)</strong>。</p>\n<p>今天有时间总结一下 (¬､¬)。</p>\n<p> </p>\n<hr />\n<p> </p>\n<h3 id=\"下载安装ヽooノ\"><a class=\"anchor\" href=\"#下载安装ヽooノ\">#</a> 下载安装ヽ (o･་།･o) ノ</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb3RwbGF5ZXJjbi5jb20vZG93bmxvYWQvUG90UGxheWVyMjAxMDIxLmh0bWw=\">PotPlayer 中文网</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3RwbGF5ZXIub3JnLw==\">PotPlayer 官网</span></p>\n<p><code>ᕦ(･ㅂ･)ᕤ</code></p>\n<p> </p>\n<h3 id=\"快捷键\"><a class=\"anchor\" href=\"#快捷键\">#</a> 快捷键</h3>\n<ul>\n<li>\n<p>方法一🧐</p>\n<ul>\n<li>安装完之后，右键 --&gt; 关于 --&gt; 有没有看到快捷键列表，就是那个💘</li>\n</ul>\n</li>\n<li>\n<p>方法二🧐</p>\n<ul>\n<li>看下面看下面，没错，我把它粘下来了😹😂🤣</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">指令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&quot;</td>\n<td style=\"text-align:center\">播放 -&gt; 跳略播放 -&gt; 跳略播放 开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">'</td>\n<td style=\"text-align:center\">播放 -&gt; 跳略播放 -&gt; 跳略播放设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 滞后 0.5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+,</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 滞后 50 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 超前 0.5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+.</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 超前 50 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 滞后 0.5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 超前 0.5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 设定起点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+[</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将起点步进 0.1 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 区段循环 开</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+\\</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 当前章节 / 标记 / 书签 区段循环</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">]</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 设定止点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+]</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将止点步进 0.1 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">`         |                 屏幕 -&gt; 迷你尺寸                 |</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 解除起点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">}</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 解除止点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Backspace</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 重新开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Backspace</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 结束前 30 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Backspace</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 中段</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Backspace</td>\n<td style=\"text-align:center\">DVD-&gt; 标题菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Tab</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt;OSD 信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Tab</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt; 简要信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Enter</td>\n<td style=\"text-align:center\">屏幕 -&gt; 全屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Enter</td>\n<td style=\"text-align:center\">屏幕 -&gt; 全屏 +(拉伸)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Enter</td>\n<td style=\"text-align:center\">屏幕 -&gt; 全屏 (其他显示器)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Enter</td>\n<td style=\"text-align:center\">屏幕 -&gt; 全屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Enter</td>\n<td style=\"text-align:center\">屏幕 -&gt; 全屏 +(保持比例)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Space</td>\n<td style=\"text-align:center\">播放 -&gt; 播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PgUp</td>\n<td style=\"text-align:center\">电视 -&gt; 下一频道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+PgUp</td>\n<td style=\"text-align:center\">上一 书签 / 章节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+PgUp</td>\n<td style=\"text-align:center\">电视 -&gt; 前一收看频道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+PgUp</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 字体 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PgDn</td>\n<td style=\"text-align:center\">电视 -&gt; 上一频道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+PgDn</td>\n<td style=\"text-align:center\">下一 书签 / 章节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+PgDn</td>\n<td style=\"text-align:center\">电视 -&gt; 后一收看频道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+PgDn</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 字体 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 下一对白</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Home</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 上一对白</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Home</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 当前字幕起点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Home</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">←</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步退 5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+←</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步退 1 分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+←</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步退 30 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+←</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 上一关键帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+←</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 左移</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+←</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步退 5 分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↑</td>\n<td style=\"text-align:center\">声音 -&gt; 音量 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+↑</td>\n<td style=\"text-align:center\">声音 -&gt; 播放音量控制 -&gt; 主音量 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+↑</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 上移</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+↑</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 波形音量 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Shift+↑</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 主音量 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步进 5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+→</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步进 1 分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+→</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步进 30 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+→</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 下一关键帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+→</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 右移</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+→</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 步进 5 分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">↓</td>\n<td style=\"text-align:center\">声音 -&gt; 音量 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+↓</td>\n<td style=\"text-align:center\">声音 -&gt; 播放音量控制 -&gt; 主音量 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+↓</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 下移</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+↓</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 波形音量 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Shift+↓</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 主音量 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Insert</td>\n<td style=\"text-align:center\">电视 -&gt; 最后收看频道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Insert</td>\n<td style=\"text-align:center\">收藏 -&gt; 添加当前文件夹</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Insert</td>\n<td style=\"text-align:center\">收藏 -&gt; 添加当前文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Delete</td>\n<td style=\"text-align:center\">电视 -&gt; 跳转至指定频道…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Delete</td>\n<td style=\"text-align:center\">播放 -&gt; 播放列表 -&gt; 删除 -&gt; 删除文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Delete</td>\n<td style=\"text-align:center\">播放 -&gt; 播放列表 -&gt; 删除 -&gt; 删除文件 (+ 字幕)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">屏幕 -&gt; 自定义尺寸设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">屏幕 -&gt; 半倍屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+1</td>\n<td style=\"text-align:center\">屏幕 -&gt; 显示器 30% 尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">屏幕 -&gt;1 倍屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+2</td>\n<td style=\"text-align:center\">屏幕 -&gt; 显示器 45% 尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">屏幕 -&gt;1.5 倍屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+3</td>\n<td style=\"text-align:center\">屏幕 -&gt; 显示器 60% 尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">屏幕 -&gt;2.0 倍屏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+4</td>\n<td style=\"text-align:center\">屏幕 -&gt; 显示器 75% 尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">屏幕 -&gt; 最大化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">屏幕 -&gt; 最大化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">屏幕 -&gt; 最大化 +(过任务栏)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">屏幕 -&gt; 无边框尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">屏幕 -&gt; 自定义尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">声音 -&gt; 选择声音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+A</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 语音增强</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+A</td>\n<td style=\"text-align:center\">声音 -&gt; 选择声音 -&gt; 按序切换声音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+A</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt; 收尾处理 -&gt; 依次切换收尾方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+B</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 软模糊</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+B</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 粗体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+B</td>\n<td style=\"text-align:center\">视频 -&gt; 下边距 -&gt; 按序切换边距</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">播放 -&gt; 播放速度 -&gt; 加速 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+C</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 晶化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+C</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 复制当前源画面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+C</td>\n<td style=\"text-align:center\">视频 -&gt; 视频录制 -&gt; 录制视频…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+C</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 复制当前实画面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 上一帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+D</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 降噪</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+D</td>\n<td style=\"text-align:center\">打开 -&gt;DVD 设备</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+D</td>\n<td style=\"text-align:center\">打开 -&gt; 设备设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+D</td>\n<td style=\"text-align:center\">打开 -&gt; 蓝光设备</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:center\">视频 -&gt; 亮度 +1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+E</td>\n<td style=\"text-align:center\">声音 -&gt; 均衡器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+E</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 截存当前源画面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+E</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕浏览器…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+E</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 截存当前实画面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 下一帧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F</td>\n<td style=\"text-align:center\">滤镜 -&gt; 滤镜 / 解码器管理…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+F</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 字体设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">G</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 手动定位…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+G</td>\n<td style=\"text-align:center\">声音 -&gt; 音轨 -&gt; 声音录制…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+G</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 连续截图…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+G</td>\n<td style=\"text-align:center\">电视 -&gt; 频道控制 -&gt; 频道管理…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">播放 -&gt; 章节 / 书签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+H</td>\n<td style=\"text-align:center\">声音 -&gt; 音调 -&gt; 低音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+H</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 去块 (提高画质)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+H</td>\n<td style=\"text-align:center\">字幕 -&gt; 显示字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">I</td>\n<td style=\"text-align:center\">视频 -&gt; 色彩度 -1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+I</td>\n<td style=\"text-align:center\">视频 -&gt; 反交错 -&gt; 切换反交错方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">视频 -&gt;3D 视频输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+J</td>\n<td style=\"text-align:center\">声音 -&gt; 音调 -&gt; 高音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+J</td>\n<td style=\"text-align:center\">打开 -&gt; 摄像头 / 其他设备</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">K</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+K</td>\n<td style=\"text-align:center\">声音 -&gt; 音调 -&gt; 默认音调</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K</td>\n<td style=\"text-align:center\">打开 -&gt; 数字 TV (BDA 设备)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+K</td>\n<td style=\"text-align:center\">视频 -&gt; 图像旋转 -&gt; 按序选择旋转方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">字幕 -&gt; 选择字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+L</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt; 语言</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+L</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 电平控制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+L</td>\n<td style=\"text-align:center\">字幕 -&gt; 选择字幕 -&gt; 依次选择字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">声音 -&gt; 静音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+M</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 瞬态降噪</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+M</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 静音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Shift+M</td>\n<td style=\"text-align:center\">声音 -&gt; 系统音量 -&gt; 静音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">电视 -&gt; 频道控制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+N</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 规格化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+N</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt;3D 降噪</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+N</td>\n<td style=\"text-align:center\">视频 -&gt; 图像截取 -&gt; 创建缩略图…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:center\">视频 -&gt; 色彩度 +1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+O</td>\n<td style=\"text-align:center\">打开 -&gt; 打开文件…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+O</td>\n<td style=\"text-align:center\">打开 -&gt; 打开字幕…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:center\">播放 -&gt; 章节 / 书签 -&gt; 添加书签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+P</td>\n<td style=\"text-align:center\">视频 -&gt; 像素着色 -&gt; 调整尺寸前的着色切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+P</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 上下翻转</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+P</td>\n<td style=\"text-align:center\">字幕 -&gt; 手动输入字幕…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+P</td>\n<td style=\"text-align:center\">视频 -&gt; 像素着色 -&gt; 调整尺寸后的着色切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Q</td>\n<td style=\"text-align:center\">视频 -&gt; 图像属性复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Q</td>\n<td style=\"text-align:center\">视频 -&gt; 裁剪 / 拉伸 -&gt; 图像缩放设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">R</td>\n<td style=\"text-align:center\">视频 -&gt; 对比度 -1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+R</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 混响</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+R</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 锐化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">视频 -&gt; 像素着色</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+S</td>\n<td style=\"text-align:center\">打开 -&gt; 采集器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+S</td>\n<td style=\"text-align:center\">字幕 -&gt; 保存字幕 -&gt; 按影片名称保存</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+S</td>\n<td style=\"text-align:center\">字幕 -&gt; 保存字幕 -&gt; 回写 SMI 字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+S</td>\n<td style=\"text-align:center\">字幕 -&gt; 保存字幕 -&gt; 另存字幕为…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T</td>\n<td style=\"text-align:center\">视频 -&gt; 对比度 +1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+T</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 左右声道互换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+T</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt; 置顶方式 -&gt; 切换最前端</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">U</td>\n<td style=\"text-align:center\">视频 -&gt; 饱和度 +1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+U</td>\n<td style=\"text-align:center\">打开 -&gt; 打开链接…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">V</td>\n<td style=\"text-align:center\">视频 -&gt; 选择图像</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+V</td>\n<td style=\"text-align:center\">声音 -&gt; 声音处理 -&gt; 语音消除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+V</td>\n<td style=\"text-align:center\">打开 -&gt; 打开剪贴板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+V</td>\n<td style=\"text-align:center\">视频 -&gt; 选择图像 -&gt; 图像顺序选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">W</td>\n<td style=\"text-align:center\">视频 -&gt; 亮度 -1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+W</td>\n<td style=\"text-align:center\">打开 -&gt; 模拟 TV</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">播放 -&gt; 播放速度 -&gt; 减速 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+X</td>\n<td style=\"text-align:center\">声音 -&gt; 开启声音处理滤镜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+X</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理滤镜 -&gt; 依次切换图像处理滤镜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">视频 -&gt; 饱和度 -1%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Y</td>\n<td style=\"text-align:center\">打开 -&gt; 重开当前 / 最后文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Y</td>\n<td style=\"text-align:center\">打开 -&gt; 重载字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Z</td>\n<td style=\"text-align:center\">播放 -&gt; 播放速度 -&gt; 正常 / 之前的速度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Z</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 时间场景浏览…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Z</td>\n<td style=\"text-align:center\">视频 -&gt; 图像处理 -&gt; 左右翻转</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Z</td>\n<td style=\"text-align:center\">播放 -&gt; 定位 -&gt; 章节 / 书签场景浏览…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 0</td>\n<td style=\"text-align:center\">帧位 -&gt; 预置 -&gt; 选择预置顺序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 1</td>\n<td style=\"text-align:center\">帧位 -&gt; 全帧 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 1</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 置于 ↙</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 2</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧高 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Numpad 2</td>\n<td style=\"text-align:center\">帧位 -&gt; 偏移 ↓</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Numpad 2</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 上下边距 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 2</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 位移 ↓</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 3</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 置于 ↘</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 4</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧宽 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Numpad 4</td>\n<td style=\"text-align:center\">帧位 -&gt; 偏移 ←</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Numpad 4</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 左右边距 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 4</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 位移 ←</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 5</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧位 之前 / 复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Numpad 5</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧位居中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 5</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 外框居中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 6</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧宽 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Numpad 6</td>\n<td style=\"text-align:center\">帧位 -&gt; 偏移 →</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Numpad 6</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 左右边距 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 6</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 位移 →</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 7</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 置于 ↖</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 8</td>\n<td style=\"text-align:center\">帧位 -&gt; 帧高 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Numpad 8</td>\n<td style=\"text-align:center\">帧位 -&gt; 偏移 ↑</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Numpad 8</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕风格 -&gt; 上下边距 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 8</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 位移 ↑</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Numpad 9</td>\n<td style=\"text-align:center\">帧位 -&gt; 全帧 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Numpad 9</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口定位 -&gt; 置于 ↗</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Add</td>\n<td style=\"text-align:center\">帧位 -&gt; 全帧 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Add</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口 +</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Subtract</td>\n<td style=\"text-align:center\">帧位 -&gt; 全帧 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+Subtract</td>\n<td style=\"text-align:center\">屏幕 -&gt; 窗口 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F1</td>\n<td style=\"text-align:center\">关于…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F1</td>\n<td style=\"text-align:center\">属性…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+F1</td>\n<td style=\"text-align:center\">直播 -&gt; 采集器 I</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F2</td>\n<td style=\"text-align:center\">打开 -&gt; 打开文件夹…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+F2</td>\n<td style=\"text-align:center\">直播 -&gt; 采集器 II</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F3</td>\n<td style=\"text-align:center\">打开文件…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+F3</td>\n<td style=\"text-align:center\">直播 -&gt; 采集器 I 开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F4</td>\n<td style=\"text-align:center\">关闭</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+F4</td>\n<td style=\"text-align:center\">直播 -&gt; 采集器 II 开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F5</td>\n<td style=\"text-align:center\">选项…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F5</td>\n<td style=\"text-align:center\">比例 -&gt; 依次切换比例模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+F5</td>\n<td style=\"text-align:center\">直播 -&gt; 采集设置…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F6</td>\n<td style=\"text-align:center\">列表…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F6</td>\n<td style=\"text-align:center\">比例 -&gt; 依次切换比例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F7</td>\n<td style=\"text-align:center\">控制…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F12</td>\n<td style=\"text-align:center\">打开 -&gt; 简索 -&gt; 简索文件…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F12</td>\n<td style=\"text-align:center\">打开 -&gt; 简索 -&gt; 简索菜单…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+F12</td>\n<td style=\"text-align:center\">打开 -&gt; 打开远程连接…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Scroll</td>\n<td style=\"text-align:center\">配置 / 语言 / 其他 -&gt; 播放信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+,</td>\n<td style=\"text-align:center\">声音 -&gt; 声音匹配 (同步)-&gt; 滞后 0.05 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+,</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 滞后 5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+,</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 上一字幕同步</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+.</td>\n<td style=\"text-align:center\">声音 -&gt; 声音匹配 (同步)-&gt; 超前 0.05 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+.</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 超前 5 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+.</td>\n<td style=\"text-align:center\">字幕 -&gt; 字幕同步 (帧率)-&gt; 下一字幕同步</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+/</td>\n<td style=\"text-align:center\">声音 -&gt; 声音匹配 (同步)-&gt; 复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+[</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将起点步退 0.1 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+[</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将循环区步退 0.1 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+\\</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 编辑 AB 区段循环列表…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+\\</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 循环当前字幕</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+]</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将止点步退 0.1 秒</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Alt+]</td>\n<td style=\"text-align:center\">播放 -&gt;AB 区段循环 -&gt; 将循环区步进 0.1 秒</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "其他",
                "PotPlayer",
                "快键键"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/e9a8ddd1/index.html",
            "url": "http://www.dgredamancy.com/posts/e9a8ddd1/index.html",
            "title": "迭代器与生成器",
            "date_published": "2020-10-28T09:32:38.000Z",
            "content_html": "<h3 id=\"迭代器与生成器\"><a class=\"anchor\" href=\"#迭代器与生成器\">#</a> 迭代器与生成器</h3>\n<h4 id=\"symbol\"><a class=\"anchor\" href=\"#symbol\">#</a> Symbol</h4>\n<h5 id=\"symbol是什么\"><a class=\"anchor\" href=\"#symbol是什么\">#</a> Symbol 是什么</h5>\n<ul>\n<li>ES6 引入了一种新的原始数据类型 <code>Symbol</code> ，表示独一无二的值</li>\n<li>Symbol 值通过 <code>Symbol</code>  函数生成</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> symbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// symbol</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> symbol2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol(XXX)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> symbol3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol(5)</span></pre></td></tr></table></figure><blockquote>\n<p>由于 Symbol 类型是原始类型，是不能通过 new Symbol () 来创建对象的。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"symbol的注意事项\"><a class=\"anchor\" href=\"#symbol的注意事项\">#</a> Symbol 的注意事项</h5>\n<ul>\n<li>尝试将一个 symbol 值转换为一个 number 值时，会抛出一个工 ypeErroc, 错误。</li>\n<li>Object (symbol) == symbol 表达式的结果返回 true。</li>\n<li>阻止从一个 symbol 值隐式地创建一个新的 string 类型的属性名。</li>\n</ul>\n<p> </p>\n<h5 id=\"symbol的方法\"><a class=\"anchor\" href=\"#symbol的方法\">#</a> Symbol 的方法</h5>\n<ul>\n<li>\n<p>Symbol.for () 方法</p>\n<ul>\n<li>作用 - 从 symbol 类型中查找指定的 key\n<ul>\n<li>如果存在这个 key 的话，返回</li>\n<li>如果不存在这个 key 的话，创建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Symbol.keyfor () 方法</p>\n</li>\n</ul>\n<blockquote>\n<p>用于获取 symbol 注册表中与某个 symbol 关联的键。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"symbol与forin\"><a class=\"anchor\" href=\"#symbol与forin\">#</a> Symbol 与 for...in</h5>\n<p>Symbols 在 for ..in 迭代中不可枚举。另外，Object.getOwnPropertyNames () 不会返回 symbol 对象的属性，但是可以使用 Obiect.getOwnPropertySymbols () 得到它们。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用 Symbol 作为对象的属性名出现，是不可枚举的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj<span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"c\" and \"d\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h4>\n<h5 id=\"迭代器是什么\"><a class=\"anchor\" href=\"#迭代器是什么\">#</a> 迭代器是什么</h5>\n<p>为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 lterator 接口，就可以完成遍历操作。</p>\n<p><strong>作用</strong>:</p>\n<ul>\n<li>为各种数据结构，提供一个统一的、简便的访问接口。</li>\n<li>使得数据结构的成员能够按某种次序排列。</li>\n<li>ES6 新增了 for...of 循环语句，用于遍历迭代器。</li>\n</ul>\n<p> </p>\n<h5 id=\"lterator接口\"><a class=\"anchor\" href=\"#lterator接口\">#</a> lterator 接口</h5>\n<p>在 JavaScript 中迭代器（ lterator ) 是一个对象，该对象提供 next () 方法用于返回序列中的下一项。该方法返回包含 done 和 value 两个属性的对象。</p>\n<ul>\n<li>作用 - 用于返回序列中的下一项</li>\n<li>返回值 - 是一个对象\n<ul>\n<li>done 属性 - 表示是否迭代完毕\n<ul>\n<li>false - 表示当前没有迭代完毕</li>\n<li>true - 表示当前迭代完毕</li>\n</ul>\n</li>\n<li>value 属性 - 表示当前迭代的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> index <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token operator\">?</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token comment\">// 是否迭代完毕</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    value<span class=\"token operator\">:</span> array<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"luck\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; done: false, value: 'tom' &#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; done: false, value: 'king' &#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; done: false, value: 'luck' &#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; done: true &#125;</span></pre></td></tr></table></figure><blockquote>\n<p>迭代器对象一旦被创建，就可以反复调用 next () 方法用于依次访问对象中的键值。</p>\n</blockquote>\n<p><strong>数据结构</strong>:</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedAccay.</li>\n<li>函数的 arguments 对象</li>\n<li>NodeList 对象</li>\n<li>......</li>\n</ul>\n<p> </p>\n<h5 id=\"迭代协议\"><a class=\"anchor\" href=\"#迭代协议\">#</a> 迭代协议</h5>\n<ul>\n<li>可迭代协议</li>\n<li>迭代器协议</li>\n</ul>\n<p> </p>\n<h4 id=\"forof语句\"><a class=\"anchor\" href=\"#forof语句\">#</a> for...of 语句</h4>\n<h5 id=\"forof语句的用法\"><a class=\"anchor\" href=\"#forof语句的用法\">#</a> for...of 语句的用法</h5>\n<blockquote>\n<p>遍历迭代器</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//attr 得到的是数组的元素内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 遍历 Set 集合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">of</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//attr 得到的是 Set 的元素内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 遍历 map 集合</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun\"</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//attr 得到的是 Map 的 [key,value] 键值对数组</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 遍历字符串</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"dg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">of</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//attr 得到的是字符串的每一个</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"返回选代器对象的方法\"><a class=\"anchor\" href=\"#返回选代器对象的方法\">#</a> 返回选代器对象的方法</h5>\n<blockquote>\n<p>返回一个迭代器对象</p>\n</blockquote>\n<p> </p>\n<h5 id=\"与foreach方法的区别\"><a class=\"anchor\" href=\"#与foreach方法的区别\">#</a> 与 forEach () 方法的区别</h5>\n<ul>\n<li>forEach () 方法无法跳出循环。换句话讲，break 语句和 continue 语句无效。</li>\n<li>for...of 语句不仅可以使用 break 语句和 continue 语句，还可以配合使用 return 语句。</li>\n</ul>\n<p> </p>\n<h5 id=\"与forin语句的区别\"><a class=\"anchor\" href=\"#与forin语句的区别\">#</a> 与 for...in 语句的区别</h5>\n<blockquote>\n<p>用于遍历对象</p>\n</blockquote>\n<ul>\n<li>for...in 不仅遍历自身，还会遍历手动添加的，甚至包括原型链的。</li>\n<li>如果用于遍历数组的话，遍历得到的键名为字符串类型的数字值。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">objcustom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Array<span class=\"token punctuation\">.</span> prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">arrcustom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>iterable<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// logs o，1，2，\"foo\",\"arrcustom\",\"objcustom\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h4>\n<h5 id=\"generator函数是什么\"><a class=\"anchor\" href=\"#generator函数是什么\">#</a> Generator 函数是什么</h5>\n<p>虽然可以自定义一个迭代器，但自定义的迭代器需要显式地维护其内部状态。而生成器提供了另一个强大的选择，其提供了允许定义一个包含自有迭代算法的函数，同时可以自动维护其内部状态。Generator 函数可以作为生成一个迭代器的特殊函数，该函数被调用时返回一个 Generator 对象，该对象是符合可迭代协议和迭代器协议的。</p>\n<blockquote>\n<p>Generator 函数与普通函数的区别在于:</p>\n<ul>\n<li><code>function*</code>  这种声明方式会定义一个生成器函数，它返回一个 Generator 对象。</li>\n<li><code>yield</code>  关键字用来暂停和恢复一个生成器函数。</li>\n</ul>\n</blockquote>\n<p> </p>\n<h5 id=\"function表达式\"><a class=\"anchor\" href=\"#function表达式\">#</a> function * 表达式</h5>\n<p>function * 这种声明方式 (function 关键字后跟一个星号) 会定义一个生成器函数（Generatorfunction )，它返回一个 Generator 对象。</p>\n<p>生成器函数在执行时能暂停，后面又能从暂停处继续执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Object [Generator] &#123;&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"yield表达式\"><a class=\"anchor\" href=\"#yield表达式\">#</a> yield 表达式</h5>\n<blockquote>\n<p>用来暂停和恢复一个生成器函数。</p>\n</blockquote>\n<p><code>[rv]=yield[expression]</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个生成器函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lucky\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">yield</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 生成器函数调用返回生成器对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 生成器对象就是 ES6 提供的迭代器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'tom', done: false &#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'king', done: false &#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'lucky', done: false &#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 'undefined', done: true &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"yield表达式-2\"><a class=\"anchor\" href=\"#yield表达式-2\">#</a> yield * 表达式</h5>\n<blockquote>\n<p>用于委托给另一个 Generator 或可迭代对象。</p>\n</blockquote>\n<p><code>yield*[[expression]]</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">g2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">g1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">yield</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 生成器函数调用返回生成器对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">g2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 生成器对象就是 ES6 提供的迭代器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 1, done: false &#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 2, done: false &#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 3, done: false &#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: 4, done: false &#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; value: undefined, done: true &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"generator对象的方法\"><a class=\"anchor\" href=\"#generator对象的方法\">#</a> Generator 对象的方法</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">next () 方法</td>\n<td style=\"text-align:center\">返回一个包含属性 done 和 value 的对象。该方法也可以通过接受一个参数用以向生成器传值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">return () 方法</td>\n<td style=\"text-align:center\">返回给定的值并结束生成器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">throw () 方法</td>\n<td style=\"text-align:center\">用于向生成器抛出异常，并恢复生成器的执行，返回带有 done 及 value 两个属性的对象</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>next ()、throw ()、return () 这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 yield 表达式。</p>\n</blockquote>\n",
            "tags": [
                "ES6",
                "es6",
                "生成器",
                "迭代器",
                "symbol",
                "for...of"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/4f346c5/index.html",
            "url": "http://www.dgredamancy.com/posts/4f346c5/index.html",
            "title": "async函数",
            "date_published": "2020-10-28T07:39:54.000Z",
            "content_html": "<h3 id=\"async函数\"><a class=\"anchor\" href=\"#async函数\">#</a> async 函数</h3>\n<h4 id=\"async函数是什么\"><a class=\"anchor\" href=\"#async函数是什么\">#</a> async 函数是什么</h4>\n<p>用于简化 Promise 异步调用的操作</p>\n<p>是 Generator 函数的语法糖</p>\n<blockquote>\n<p><code>async/await</code>  类似于组合生成器和 Promises</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">resloveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calling'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">resloveAfter2Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">asyncCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"语法结构\"><a class=\"anchor\" href=\"#语法结构\">#</a> 语法结构</h4>\n<p><code>异步函数</code> 是指通过事件循环异步执行的函数，它会通过一个隐式的 Pronise 返回其结果。</p>\n<h5 id=\"异步函数声明式\"><a class=\"anchor\" href=\"#异步函数声明式\">#</a> 异步函数 <code>声明式</code></h5>\n<blockquote>\n<p>用于定义一个返回 Promise 对象的异步函数。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"异步函数表达式\"><a class=\"anchor\" href=\"#异步函数表达式\">#</a> 异步函数 <code>表达式</code></h5>\n<blockquote>\n<p>用于在表达式中定义异步函数。</p>\n</blockquote>\n<p> </p>\n<p><strong>区别:</strong></p>\n<p><code>在于异步函数表达式可以省略函数名称来创建一个匿名函数。</code></p>\n<p> </p>\n<h5 id=\"返回promise对象\"><a class=\"anchor\" href=\"#返回promise对象\">#</a> 返回 Promise 对象</h5>\n<blockquote>\n<p>async 函数返回一个 Promise 对象。async, 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//async 函数返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// console.log(promise);//Promise &#123; 'hello world' &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello world</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>return 语句中没有 await 表达式，因为异步函数的返回值将被隐式地传递 Promise.resolve</p>\n</blockquote>\n<p> </p>\n<h4 id=\"await表达式\"><a class=\"anchor\" href=\"#await表达式\">#</a> await 表达式</h4>\n<h5 id=\"await表达式是什么\"><a class=\"anchor\" href=\"#await表达式是什么\">#</a> await 表达式是什么</h5>\n<blockquote>\n<p>用于等待一个 Promnise 对象，它只能在异步函数异步函数中使用。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前异步函数被调用了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"错误处理\"><a class=\"anchor\" href=\"#错误处理\">#</a> 错误处理</h5>\n<blockquote>\n<p>如果 await 后面的异步操作出错，那么等同于 async 函数返回的 Prornise 对象被 <code>reject</code></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前异步函数被调用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">myAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h4>\n<h5 id=\"使用trycatch语句\"><a class=\"anchor\" href=\"#使用trycatch语句\">#</a> 使用 try...catch 语句</h5>\n<blockquote>\n<p>await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 表达式放置在 try...catch 代码块中。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"多个await同时触发\"><a class=\"anchor\" href=\"#多个await同时触发\">#</a> 多个 await 同时触发</h5>\n<blockquote>\n<p>多个 await 表达式后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"await表达式的限制\"><a class=\"anchor\" href=\"#await表达式的限制\">#</a> await 表达式的限制</h5>\n<blockquote>\n<p>await 表达式只能用在 async 函数之中，如果用在普通函数，就会报错。</p>\n</blockquote>\n",
            "tags": [
                "ES6",
                "es6",
                "async",
                "await"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/d514f91/index.html",
            "url": "http://www.dgredamancy.com/posts/d514f91/index.html",
            "title": "Promise对象",
            "date_published": "2020-10-28T06:49:22.000Z",
            "content_html": "<h3 id=\"promise对象\"><a class=\"anchor\" href=\"#promise对象\">#</a> Promise 对象</h3>\n<h4 id=\"promise对象是什么\"><a class=\"anchor\" href=\"#promise对象是什么\">#</a> Promise 对象是什么</h4>\n<h5 id=\"promise对象是什么-2\"><a class=\"anchor\" href=\"#promise对象是什么-2\">#</a> Promise 对象是什么</h5>\n<p>ES6 新增了 Prormnise 对象，该对象允许对延迟和异步操作流程进行控制。一个 Promise 对象就是一个代表了异步操作最终完成或者失败的对象。</p>\n<p>开发人员可以使用由其他函数创建并返回的 Promise 对象。Promise 对象本质上就是一个绑定了回调的对象，而不是将回调传进函数内部。</p>\n<p>一个 Promise 有以下几种状态:</p>\n<ul>\n<li>pending: 初始状态，既不是成功，也不是失败状态。</li>\n<li>fulfilled: 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n</ul>\n<p> </p>\n<h5 id=\"创建promise对象\"><a class=\"anchor\" href=\"#创建promise对象\">#</a> 创建 Promise 对象</h5>\n<p><code>let promise = new Promise( function( resolve，reject)&#123;&#125;)</code></p>\n<ul>\n<li>当前的构造函数 Promise 接收一个回调函数 -- function (resolve,reject)[}\n<ul>\n<li>resolve - 是一个函数，将 Promise 的状态改为 fulfilled (完成)</li>\n<li>reject - 是一个函数，将 Promise 的状态改为 rejected（失败)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Promise 的初始化状态 – 既不成功，也不失败</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将 Promise 状态改变 - 要么成功，要么失败</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Promise 对象由其他函数创建并返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试成功啦..· '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"promise对象的约定\"><a class=\"anchor\" href=\"#promise对象的约定\">#</a> Promise 对象的约定</h5>\n<ul>\n<li>在 JavaScript 事件队列的当前运行完成之前，回调函数永远不会被调用。</li>\n<li>通过.then 形式添加的回调函数，甚至都在异步操作完成之后才被添加的函数，都会被调用。</li>\n<li>通过多次调用.then，可以添加多个回调函数，它们会按照插入顺序并且独立运行。</li>\n</ul>\n<blockquote>\n<p>Promise 最直接的好处就是 <code>链式调用</code></p>\n</blockquote>\n<p> </p>\n<h5 id=\"promise对象的链式操作\"><a class=\"anchor\" href=\"#promise对象的链式操作\">#</a> Promise 对象的链式操作</h5>\n<p>常见的需求就是连续执行两个或者多个异步操作。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//then () 方法返回一个新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 测试成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//promise 和 promise2 是两个对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123; &lt;pending> &#125; Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise2 <span class=\"token operator\">===</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">===</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// false</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"promise对象原型的方法\"><a class=\"anchor\" href=\"#promise对象原型的方法\">#</a> Promise 对象原型的方法</h4>\n<h5 id=\"then方法\"><a class=\"anchor\" href=\"#then方法\">#</a> then () 方法</h5>\n<blockquote>\n<p>用于为 Promise 对象添加状态改变时回调函数</p>\n</blockquote>\n<p> </p>\n<h5 id=\"catch方法\"><a class=\"anchor\" href=\"#catch方法\">#</a> catch () 方法</h5>\n<blockquote>\n<p>返回一个 Prornise 对象，并且处理拒绝的情况。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//reject (' 测试失败 ')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//then () 方法 - 当改变 Promise 状态时执行回调函数 (成功)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//reslove</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//reject</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"finally方法\"><a class=\"anchor\" href=\"#finally方法\">#</a> finally () 方法</h5>\n<blockquote>\n<p>返回一个 Promise 对象，在执行  <code>then()</code>  和  <code>catch()</code>  后，都会执行 finally 指定的回调函数</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'测试成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//reject (' 测试失败 ')</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//then () 方法 - 当改变 Promise 状态时执行回调函数 (成功)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//reslove</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//reject</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// finally</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"promise对象的方法\"><a class=\"anchor\" href=\"#promise对象的方法\">#</a> Promise 对象的方法</h4>\n<h5 id=\"promiseall方法\"><a class=\"anchor\" href=\"#promiseall方法\">#</a> Promise.all () 方法</h5>\n<blockquote>\n<p>用于将多个 Promise 对象，包装成一个新的 Promise 对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Promise.all () 方法将多个 Promise 对象整合成一个 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"promiserace方法\"><a class=\"anchor\" href=\"#promiserace方法\">#</a> Promise.race () 方法</h5>\n<blockquote>\n<p>将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<p>一旦迭代器中的某个承诺解决或拒绝，返回的 Promise 就会解决或者拒绝</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//race () 方法 – 是以某个 Promise 对象的状态改变时，表示整合后的 Promise 对象成功或失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//one</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"promiseresole方法\"><a class=\"anchor\" href=\"#promiseresole方法\">#</a> Promise.resole () 方法</h5>\n<blockquote>\n<p>返回一个以给定值解析后的 Promise 对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"promisereject方法\"><a class=\"anchor\" href=\"#promisereject方法\">#</a> Promise.reject () 方法</h5>\n<blockquote>\n<p>返回一个带有拒绝原因 reason 参数的 Promise 对象。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出错了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 出错了</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"promise对象的应用\"><a class=\"anchor\" href=\"#promise对象的应用\">#</a> Promise 对象的应用</h4>\n<h5 id=\"加载图片\"><a class=\"anchor\" href=\"#加载图片\">#</a> 加载图片</h5>\n<blockquote>\n<p>可以将图片的加载写成一个 Prormise，一旦加载完成，Promise 的状态就发生变化。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preloadImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    image<span class=\"token punctuation\">.</span>onload  <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    image<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    image<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"通过ajax加载图片\"><a class=\"anchor\" href=\"#通过ajax加载图片\">#</a> 通过 Ajax 加载图片</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">imgLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error code:'</span><span class=\"token operator\">+</span>request<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'It is a network error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"promise对象的原理剖析\"><a class=\"anchor\" href=\"#promise对象的原理剖析\">#</a> Promise 对象的原理剖析</h4>\n<h5 id=\"promise执行流程\"><a class=\"anchor\" href=\"#promise执行流程\">#</a> Promise 执行流程</h5>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/28/ba4496e8f42bf8d6048e52810cd0e865.png\" alt=\"\" /></p>\n",
            "tags": [
                "ES6",
                "promise",
                "es6"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/5f1fa8df/index.html",
            "url": "http://www.dgredamancy.com/posts/5f1fa8df/index.html",
            "title": "键值对集合",
            "date_published": "2020-10-28T02:37:41.000Z",
            "content_html": "<h3 id=\"键值对集合\"><a class=\"anchor\" href=\"#键值对集合\">#</a> 键值对集合</h3>\n<h4 id=\"set集合\"><a class=\"anchor\" href=\"#set集合\">#</a> Set 集合</h4>\n<h5 id=\"set集合是什么\"><a class=\"anchor\" href=\"#set集合是什么\">#</a> Set 集合是什么</h5>\n<ul>\n<li>Set 对象是值的集合，可以按照插入的顺序迭代它的元素。</li>\n<li>Set 集合中的 <code>元素只会出现一次</code> ，即 Set 集合中的元素是唯一的，没有重复的值。</li>\n<li><code>Set</code>  本身是一个构造函数，用来生成 Set 数据结构。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123;1,2,3,4,5&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// console.log(Set.prototype);// Set &#123;&#125;</span></pre></td></tr></table></figure><p> </p>\n<blockquote>\n<p>NaN. undefined 等值允许被存储在 Set 集合中</p>\n<p>NaN 值在 Set 集合中被认为是相等的</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123; NaN,undefined,null &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p> </p>\n<blockquote>\n<ul>\n<li>set 集合中存储复杂数据类型 (数组、对象及函数等)\n<ul>\n<li>空数组和空对象表示多个值</li>\n<li>多个函数依旧也表示多个值</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123; [], [], &#123;&#125;, &#123;&#125;, [Function], [Function] &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"set集合的属性与方法\"><a class=\"anchor\" href=\"#set集合的属性与方法\">#</a> Set 集合的属性与方法</h5>\n<h6 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">constructor</td>\n<td style=\"text-align:center\">构造函数，默认就是 <code>Set</code>  函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">size</td>\n<td style=\"text-align:center\">返回 <code>Set </code> 对象的值的个数。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//set 的 size 属性相当于数组中的 length 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 5</span></pre></td></tr></table></figure><p> </p>\n<h6 id=\"操作方法\"><a class=\"anchor\" href=\"#操作方法\">#</a> 操作方法</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add(value)</td>\n<td style=\"text-align:center\">添加某个值，返回 Set 结构本身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete(value)</td>\n<td style=\"text-align:center\">删除某个值 ( <code>不是索引值</code> )，返回一个布尔值，表示删除是否成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has(value)</td>\n<td style=\"text-align:center\">返回一个布尔值，表示该值是否为 <code>Set</code>  的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清除所有成员，没有返回值</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    add (value) - 向 Set 集合的结尾添加新的元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        * 返回值 – 添加新元素后的 Set 集合</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123; 1, 2, 3, 4, 5, 6 &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    delete (value) - 从 set 集合删除指定元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        *value - 表示 Set 集合中的元素内容 (值)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        * 返回值 - 布尔值，true 表示删除成功，false 表示删除失败</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123; 2, 3, 4, 5, 6 &#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    has (value) - 判断指定 Set 集合中是否包含指定元素</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        *value - 表示 Set 集合中的元素内容 (值)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        * 返回值 - 布尔值，true 表示包含，false 表示不包含</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//clear () - 清空所有成员</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Set &#123;&#125;</span></pre></td></tr></table></figure><p> </p>\n<h6 id=\"遍历方法\"><a class=\"anchor\" href=\"#遍历方法\">#</a> 遍历方法</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">values()</td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Set 集合中的按 <code>插入顺序</code> 排列的所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keys()</td>\n<td style=\"text-align:center\">与 values0 方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">entries()</td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Set 集合中的按 <code>插入顺序</code> 排列的所有元素的值的 [value, value] 数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">forEach()</td>\n<td style=\"text-align:center\">按照插入顺序，为 Set 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>values () - 返回的当前 set 集合中所有值的迭代器对象</li>\n<li>keys () - 返回的当前 set 集舍中所有键的迭代器对象</li>\n<li>entries () - 返回的当前 Set 集合中所有键值的迭代器对象</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    values () 方法 - 返回一个迭代器对象 (SetIterator)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        * 没有 length 属性值 – 常规的循环语句无法使用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        * 不能 for...in 循环语句</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        * 只能使用 for...of 进行循环</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// console.log(set.values());// [Set Iterator] &#123; 1, 2, 3, 4, 5 &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name <span class=\"token keyword\">of</span> iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    虽然 set 集合具有 size 属性–表示当前 set 集合中元素的个数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    但是 Set 集合获取每一个元素内容，不能使用 set [索引值] 的方式</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    set 集合提供的遍历的方法</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        * values () - 返回的当前 set 集合中所有值的迭代器对象</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        * keys () - 返回的当前 set 集舍中所有键的迭代器对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        * entries () - 返回的当前 Set 集合中所有键值的迭代器对象</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        * Set 集合的特殊 - set 集合中键与值相同</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [Set Entries] &#123; [ 1, 1 ], [ 2, 2 ], [ 3, 3 ], [ 4, 4 ], [ 5, 5 ] &#125;</span></pre></td></tr></table></figure><p> </p>\n<blockquote>\n<ul>\n<li>set 集合提供 forEach () 方法\n<ul>\n<li>作用 ― 用于遍历当前的 Set 集台 (为 Set 集合中每个元素调用 callback 函数)</li>\n<li>回调函数  --  function (value,key,set){}\n<ul>\n<li>value - 表示当前 Set 集合中每一个值</li>\n<li>key - 表示当前 Set 集合中每一个键</li>\n<li>表示当前 Set 集合中每一个键</li>\n<li>set - 表示当前遍历的 Set 集合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>1 1 Set &#123; 1, 2, 3, 4, 5 &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2 2 Set &#123; 1, 2, 3, 4, 5 &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3 3 Set &#123; 1, 2, 3, 4, 5 &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>4 4 Set &#123; 1, 2, 3, 4, 5 &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>5 5 Set &#123; 1, 2, 3, 4, 5 &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"set集合与array对比\"><a class=\"anchor\" href=\"#set集合与array对比\">#</a> Set 集合与 Array 对比</h5>\n<ul>\n<li>数组中用于判断元素是否存在的 indexOf () 函数效率低下。</li>\n<li>Set 对象允许根据值删除元素，而数组中必须使用基于下标的  <code>splice()</code>  方法。</li>\n<li>数组的 indexOf () 方法无法找到 <code>NaN</code>  值。</li>\n<li>Set 对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li>\n</ul>\n<p> </p>\n<h4 id=\"weakset集合\"><a class=\"anchor\" href=\"#weakset集合\">#</a> WeakSet 集合</h4>\n<h5 id=\"weakset是什么\"><a class=\"anchor\" href=\"#weakset是什么\">#</a> WeakSet 是什么</h5>\n<p>WeakSet 对象是一些对象值的集合，并且其中的每个对象值都只能出现一次。</p>\n<p>WeakSet 对象与 Set 对象的区别主要有两点:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Set</th>\n<th style=\"text-align:center\">WeakSet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">存放对象引用和值</td>\n<td style=\"text-align:center\">只能 <code>存放对象引用</code> ，不能 <code>存放值</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对象是值的集合</td>\n<td style=\"text-align:center\">对象都是弱引用，没有枚举和遍历迭代</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//weakset 集合只能存储对象，存储的对象无法被枚举</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name <span class=\"token operator\">:</span><span class=\"token string\">'张无忌'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">:</span><span class=\"token string\">'周芷若'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// WeakSet &#123; &lt;items unknown> &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"weakset集合的方法\"><a class=\"anchor\" href=\"#weakset集合的方法\">#</a> WeakSet 集合的方法</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add(value)</td>\n<td style=\"text-align:center\">在 WeakSet 集合尾部添加一个元素，返回该 WeakSet 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete(value)</td>\n<td style=\"text-align:center\">从 WeakSet 集合删除指定的元素。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has(value)</td>\n<td style=\"text-align:center\">检索 WeakSet 集合是否包含指定的元素。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清除 WeakSet 集合中所有元素，没有返回值</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<h4 id=\"map集合\"><a class=\"anchor\" href=\"#map集合\">#</a> Map 集合</h4>\n<h5 id=\"map集合是什么\"><a class=\"anchor\" href=\"#map集合是什么\">#</a> Map 集合是什么</h5>\n<ul>\n<li>Map 集合是键值对的集合。</li>\n<li>任何值都可以作为 Map 集合中的键或值。</li>\n<li>Map 集合可以按照插入的顺序迭代它的元素。</li>\n</ul>\n<p> </p>\n<h5 id=\"map集合的属性与方法\"><a class=\"anchor\" href=\"#map集合的属性与方法\">#</a> Map 集合的属性与方法</h5>\n<h6 id=\"属性-2\"><a class=\"anchor\" href=\"#属性-2\">#</a> 属性</h6>\n<ul>\n<li>size - 返回 Map 结构的成员总数。</li>\n</ul>\n<h6 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">set(key, value)</td>\n<td style=\"text-align:center\">设置 Map 对象中键的值。返回该 Map 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(key)</td>\n<td style=\"text-align:center\">返回键对应的值。如果不存在，则返回 undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete(key)</td>\n<td style=\"text-align:center\">从 Map 集合删除指定的键值对。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has(key)</td>\n<td style=\"text-align:center\">检索 Map 集合是否包含指定键对应的值。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清除 Map 集合中所有键值对，没有返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">values()</td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keys()</td>\n<td style=\"text-align:center\">与 values () 方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">entries()</td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中的按插入顺序排列的所有元素的值的 [key, value] 数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">forEach()</td>\n<td style=\"text-align:center\">按照插入顺序，为 Map 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Map 集合 - 空集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>str <span class=\"token operator\">=</span><span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun'</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 张无忌</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Map &#123;'str' => ' 张无忌 ', 'fun' => [Function: fun], 'obj' => &#123;&#125; &#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>map.clear()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console.log(map);// Map &#123;&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [Map Iterator] &#123; ' 张无忌 ', [Function: fun], &#123;&#125; &#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [Map Iterator] &#123; 'str', 'fun', 'obj' &#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"map集合键的相等\"><a class=\"anchor\" href=\"#map集合键的相等\">#</a> Map 集合键的相等</h5>\n<p>Map 集合的键的比较是基于 “SameValueZero” 算法:</p>\n<ul>\n<li>\n<p>判断使用与 === 相似的规则。</p>\n</li>\n<li>\n<p>-0 和 + 0 相等。</p>\n</li>\n<li>\n<p>NaN 与自身相等（与 === 有所不同)。</p>\n</li>\n</ul>\n<p> </p>\n<h5 id=\"map集合与object对比\"><a class=\"anchor\" href=\"#map集合与object对比\">#</a> Map 集合与 Object 对比</h5>\n<p>一般情况下，Object 会被用于将字符串类型映射到数值。Object 允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而 Map 具有更多的优势:</p>\n<ul>\n<li>Object 的键均为 String 类型，在 Map 里键可以是任意类型。</li>\n<li>必须手动计算 Object 的尺寸，但是可以很容易地获取使用 Map 的尺寸。</li>\n<li>Map 的遍历遵循元素的插入顺序。</li>\n<li>Object 有原型，所以映射中有一些缺省的键。</li>\n</ul>\n<p> </p>\n<h4 id=\"weakmap集合\"><a class=\"anchor\" href=\"#weakmap集合\">#</a> WeakMap 集合</h4>\n<h5 id=\"weakmap集合是什么\"><a class=\"anchor\" href=\"#weakmap集合是什么\">#</a> WeakMap 集合是什么</h5>\n<p>用于生成键值对的集合</p>\n<p>它的 <code>键</code> 必须是 <code>对象类型</code> ， <code>值</code> 可以是 <code>任意类型</code></p>\n<p>不可枚举</p>\n<h5 id=\"weakmap集合的方法\"><a class=\"anchor\" href=\"#weakmap集合的方法\">#</a> WeakMap 集合的方法</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">set(key, value)</td>\n<td style=\"text-align:center\">设置 WeakMap 对象中键的值。返回该 WeakMap 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">get(key)</td>\n<td style=\"text-align:center\">返回键对应的值。如果不存在，则返回 undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">delete(key)</td>\n<td style=\"text-align:center\">从 WeakMap 集合删除指定的键值对。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">has(key)</td>\n<td style=\"text-align:center\">检索 WeakMap 集合是否包含指定键对应的值。返回布尔值，表示是否包含</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "ES6",
                "es6",
                "set集合",
                "WeakSet集合",
                "Map集合",
                "WeakMap集合"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/44ba40e2/index.html",
            "url": "http://www.dgredamancy.com/posts/44ba40e2/index.html",
            "title": "对象的扩展",
            "date_published": "2020-10-27T12:36:50.000Z",
            "content_html": "<h3 id=\"对象的扩展\"><a class=\"anchor\" href=\"#对象的扩展\">#</a> 对象的扩展</h3>\n<h4 id=\"对象的属性\"><a class=\"anchor\" href=\"#对象的属性\">#</a> 对象的属性</h4>\n<h5 id=\"属性表示法\"><a class=\"anchor\" href=\"#属性表示法\">#</a> 属性表示法</h5>\n<blockquote>\n<p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</p>\n</blockquote>\n<p><strong>ES5</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ES5 定义对象的属性和方法的方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span>name<span class=\"token punctuation\">,</span><span class=\"token comment\">// 第二个 name 表示变量名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    sayMe<span class=\"token operator\">:</span>sayMe<span class=\"token punctuation\">,</span><span class=\"token comment\">//// 第二个 sayMe 表示函数名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张无忌</span></pre></td></tr></table></figure><p><strong>ES6</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is 张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ES6 允许将变量名和函数名直接作为对象的属性和方法的方式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    sayMe<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张无忌</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"object的方法\"><a class=\"anchor\" href=\"#object的方法\">#</a> Object 的方法</h4>\n<h5 id=\"objectis\"><a class=\"anchor\" href=\"#objectis\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> () 的方法</h5>\n<p>ESt 5 比较两个值是否相等，使用的是相等运算符 (= =) 和全等运算符 ( = = = )。但这两个运算符在使用时都具有缺点:</p>\n<ul>\n<li>相等运算符在比较之前，会自动转换数据类型。</li>\n<li>全等运算符导致 NaN 与自身不等，+0 等于 - 0 等问题。</li>\n</ul>\n<p>ES6 提出了 <code>同值相等</code>  (Same - value equality) 算法来解决以上问题。Objectis () 方法就是对同值相等算法的具体实现。.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5 .</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// ES6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"objectassign的方法\"><a class=\"anchor\" href=\"#objectassign的方法\">#</a> Object.assign () 的方法</h5>\n<blockquote>\n<p>用于将所有 <code>可枚举</code> 属性的值从一个或多个源对象复制到目标对象。</p>\n</blockquote>\n<p><code>Object.assign(target,...sources)</code></p>\n<ul>\n<li>target: 目标对象。</li>\n<li>sources: 源对象。</li>\n<li>返回值：目标对象。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;name: ' 张无忌 ', age: 18&#125; &#123; name: ' 张无忌 ', age: 18 &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'周芷若'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 张无忌</span></pre></td></tr></table></figure><blockquote>\n<p>Object.assign () 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。</p>\n</blockquote>\n<p> </p>\n<h4 id=\"super关键字\"><a class=\"anchor\" href=\"#super关键字\">#</a> super 关键字</h4>\n<p>用于指向 <code>当前对象</code> 的 <code>原型对象</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Hero &#123;&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Hero</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> hero <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hero<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayYou</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>hero<span class=\"token punctuation\">.</span><span class=\"token function\">sayYou</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> prop <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prop.age</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>super 关键字表示 <code>原型对象</code> 时，只能用在对象的方法之中，用在其他地方都会报错。</p>\n</blockquote>\n<p> </p>\n<h4 id=\"对象的扩展运算符\"><a class=\"anchor\" href=\"#对象的扩展运算符\">#</a> 对象的扩展运算符</h4>\n<p>对象的扩展运算符 (...) 用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将元对象的可枚举的属性复制到目标对象。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;name: ' 张无忌 ', age: 18&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "ES6",
                "es6"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/6d268907/index.html",
            "url": "http://www.dgredamancy.com/posts/6d268907/index.html",
            "title": "函数的扩展",
            "date_published": "2020-10-27T11:47:26.000Z",
            "content_html": "<h3 id=\"函数的扩展\"><a class=\"anchor\" href=\"#函数的扩展\">#</a> 函数的扩展</h3>\n<h4 id=\"函数参数的默认值\"><a class=\"anchor\" href=\"#函数参数的默认值\">#</a> 函数参数的默认值</h4>\n<h5 id=\"函数参数指定状认值\"><a class=\"anchor\" href=\"#函数参数指定状认值\">#</a> 函数参数指定状认值</h5>\n<blockquote>\n<p>ES6 之前，不能直接为函数的参数指定默认值，如果定义了形参，不传递实参时导致形参为 undefined，只能采用变通的方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ES5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arg <span class=\"token operator\">=</span> arg <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"与解构赋值配合使用\"><a class=\"anchor\" href=\"#与解构赋值配合使用\">#</a> 与解构赋值配合使用</h5>\n<blockquote>\n<p>参数默认值可以与解构赋值的默认值，结合起来使用。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"函数参数的作用域\"><a class=\"anchor\" href=\"#函数参数的作用域\">#</a> 函数参数的作用域</h5>\n<blockquote>\n<p>如果为函数的参数设置默认值的话，当函数声明进行初始化时，参数会形成一 个独立的作用域。这个作用域会在函数初始化完毕时消失。</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/27/33d888c956a9bf0ba6af04d0972cad76.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg <span class=\"token operator\">=</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"rest参数\"><a class=\"anchor\" href=\"#rest参数\">#</a> rest 参数</h4>\n<p>ES6 引入 rest 参数（形式为 <code>...变量名</code> ），用于获取函数的多余参数，这样就不需要使用 <code>arguments</code>  对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES6 - 利用 rest 参数接收多余的参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 扩展运算符 - 原地展开可迭代的对象 (数组、字符串等)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 1 2 3 4 5</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>rest 参数之后不能再有其他参数 (即只能是最后一个参数)，否则会报错。</li>\n<li>函数的 length 属性，不包含 rest 参数。</li>\n</ul>\n</blockquote>\n<p> </p>\n<h4 id=\"箭头函数\"><a class=\"anchor\" href=\"#箭头函数\">#</a> 箭头函数</h4>\n<h5 id=\"箭头函数是什么\"><a class=\"anchor\" href=\"#箭头函数是什么\">#</a> 箭头函数是什么</h5>\n<blockquote>\n<p>ES6 允许使用 “箭头”（ <code>=&gt;</code> ）定义函数。箭头函数是匿名的</p>\n<p>函数和 this 会影响引入箭头函数</p>\n</blockquote>\n<ul>\n<li>() - 表示声明函数时的参数 (形参)</li>\n<li>=&gt; 内容 - 表示声明函数时的函数体</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">n</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">n</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 改写为箭头函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 改写为箭头函数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"箭头函数的this\"><a class=\"anchor\" href=\"#箭头函数的this\">#</a> 箭头函数的 this</h5>\n<p><strong>ES5</strong></p>\n<blockquote>\n<p>定义函数时，使用的 this -&gt; 指向调用函数时的上下文对象</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将 fn 作为函数进行调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前执行环境中的全局对象 (浏览器环境是 window;Node. js 环境是 Global 对象)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 call () 或 apply () 方法调用函数 fn</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前执行环境中的全局对象 (浏览器环境是 window;Node. js 环境是 Global 对象)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 函数 fn 作为对象 obj2 的方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    sayMe<span class=\"token operator\">:</span>fn</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>obj2<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// obj2</span></pre></td></tr></table></figure><p><strong>ES6</strong></p>\n<blockquote>\n<p>声明箭头函数，函数中的 this -&gt; 指向的是定义箭头函数时的上下文对象</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">n</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// &#123;&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sayMe <span class=\"token operator\">:</span> n</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj3<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// &#123;&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"简头函数的语法结构\"><a class=\"anchor\" href=\"#简头函数的语法结构\">#</a> 简头函数的语法结构</h5>\n<ul 函数声明=\"\">\n<li 函数声明=\"\">\n<p>基本语法结构</p>\n<ul>\n<li return表达式;=\"\">\n<blockquote>\n<p>(參数 1, 参数 2, .. 参数 N)=&gt; {函数声明}<br />\n(参数 1, 参数 2.,.. 参数 N)=&gt; 表达式 (单一)<br />\n 相当于: (参数 1, 参数 2, .. 参数 N) =&gt;</p>\n</blockquote>\n</li>\n<li 函数声明=\"\">\n<blockquote>\n<p>当只有一个参数时，圆括号是可选的:<br />\n(单一参数) =&gt; {函数声明}<br />\n 单一参数 =&gt;</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>没有参数的函数应该写成一对圆括号。<br />\n() =&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>高级语法结构</p>\n<ul>\n<li>\n<blockquote>\n<p>支持剩余参数和默认参数<br />\n (参数 1, 参数 2, ...rest)=&gt;{函数声明}<br />\n(参数 1 = 默认值 1, 参数 2, ..., 参数 N = 默认值 N) =&gt;</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p> </p>\n<h5 id=\"箭头函数的注意事项\"><a class=\"anchor\" href=\"#箭头函数的注意事项\">#</a> 箭头函数的注意事项</h5>\n<p>（1）函数体内的 <code>this</code>  对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用 <code>new</code>  命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用 <code>arguments</code>  对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用 <code>yield</code>  命令，因此箭头函数不能用作 Generator 函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 箭头函数不能作为构造函数使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'张无忌'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 箭头函数可以作为对象的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name <span class=\"token operator\">:</span> <span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is 张无忌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// ES6 对象方法定义</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    name <span class=\"token operator\">:</span> <span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is 张无忌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 箭头函数中不存在 arguments 对象， 需要使用 rest 参数进行替换</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"函数的尾调用\"><a class=\"anchor\" href=\"#函数的尾调用\">#</a> 函数的尾调用</h4>\n<p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示尾调用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr></table></figure><blockquote>\n<p>尾调用不一定出现在函数尾部，只要是最后一步操作即可。</p>\n</blockquote>\n<p><strong>以下三种不属于尾调用</strong></p>\n<ul>\n<li>情况一</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用函数 g 之后，还有赋值操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>情况二</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写在一行内，执行的不是最后一步操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>情况三</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 相当于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n",
            "tags": [
                "ES6",
                "es6"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/92fcb13d/index.html",
            "url": "http://www.dgredamancy.com/posts/92fcb13d/index.html",
            "title": "数组的扩展",
            "date_published": "2020-10-27T07:42:07.000Z",
            "content_html": "<h3 id=\"数组的扩展\"><a class=\"anchor\" href=\"#数组的扩展\">#</a> 数组的扩展</h3>\n<h4 id=\"扩展运算符\"><a class=\"anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h4>\n<h5 id=\"扩展运算符-2\"><a class=\"anchor\" href=\"#扩展运算符-2\">#</a> 扩展运算符</h5>\n<p>扩展运算符（spread）是三个点（ <code>...</code> ）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。允许一个表达式在原地展开</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将数组中的每一个元素打印在控制台</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 利用扩展运算符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 3 4 5</span></pre></td></tr></table></figure><p> </p>\n<blockquote>\n<p>主要用于函数调用 (形参和实参)</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 利用扩展运算符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"替代apply方法\"><a class=\"anchor\" href=\"#替代apply方法\">#</a> 替代 apply () 方法</h5>\n<p>由于扩展运算符可以展开数组，所以不再需要 <code>apply</code>  方法，将数组转为函数的参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     call () 与 apply (方法的区别:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * call (this, arg1,arg2,arg3, ...)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        * 接收参数为多个参数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    *apply (this, arr)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        * 接收参数为一个数组</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"扩展运算符的应用\"><a class=\"anchor\" href=\"#扩展运算符的应用\">#</a> 扩展运算符的应用</h5>\n<ul>\n<li>复制数组 -- <strong>深复制</strong>\n<ul>\n<li>深复制\n<ul>\n<li>复制数组中的元素内容 (数据)</li>\n</ul>\n</li>\n<li>浅复制\n<ul>\n<li>复制数组的内存地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ES5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var arr2 = [];</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>for (var i=0; i&lt;arr1.length; i++)&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    arr2[i] = arr1[i];</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console.log(arr2);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arr2[2] = 6;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console.log(arr2,arr1);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 扩展运算符复制数组–深复制</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 2, 3, 4, 5 ]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 2, 6, 4, 5 ] [ 1, 2, 3, 4, 5 ]</span></pre></td></tr></table></figure><ul>\n<li>合并数组 -- <strong>浅拷贝</strong></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ES5 合并数组的方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 利用扩展运算符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></pre></td></tr></table></figure><ul>\n<li>与解构赋值结合</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// ES5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>var v = arr[0];</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var list = arr.slice(1);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console.log(v, list);// 1 [ 2, 3, 4, 5 ]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 扩展运算符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>var [v,...list] = arr</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console.log(v, list);// 1 [ 2, 3, 4, 5 ]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr></table></figure><blockquote>\n<p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>list<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// SyntaxError: Rest element must be last element</span></pre></td></tr></table></figure><ul>\n<li>字符串转换为数组</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hebei'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//ES5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 'h', 'e', 'b', 'e', 'i' ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 'h', 'e', 'b', 'e', 'i' ]</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"array提供的方法\"><a class=\"anchor\" href=\"#array提供的方法\">#</a> Array 提供的方法</h4>\n<h5 id=\"arrayfrom方法\"><a class=\"anchor\" href=\"#arrayfrom方法\">#</a> Array.from () 方法</h5>\n<blockquote>\n<p>用于从 — 个类似数组的对象或可迭代对象中 (包括 ES6 新增的 <code>Set</code>  和 <code>Map</code> ) 创建一个新的数组实例</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构建一个类数组对象– 1. 可迭代；2. 有效的 length</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'0'</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'1'</span><span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'2'</span><span class=\"token operator\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    length<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console.log(obj);// &#123; '0': 'a', '1': 'b', '2': 'c', length: 3 &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>for (var i=0; i&lt;obj.length;i++)&#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console.log(obj[i]);</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//ES5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// [ 'a', 'b', 'c' ]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//ES6</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 'a', 'b', 'c' ]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 扩展运算符</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// console.log([...obj]);// TypeError: obj is not iterable</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a b c</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//arguments 对象–用于接收所有的实参</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的 <code>arguments</code>  对象。 <code>Array.from</code>  都可以将它们转为真正的数组</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>北京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>南京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>天津<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        HTMLCollection 和 NodeList 称为类数丝</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">var</span> elems <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// console.log(elems instanceof HTMLCollectionOf);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"arrayof方法\"><a class=\"anchor\" href=\"#arrayof方法\">#</a> Array.of () 方法</h5>\n<blockquote>\n<p>用于创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Array.of () 如果传递一个参数时，表示一个元素内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[5]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1,2,3]</span></pre></td></tr></table></figure><p>这个方法的主要目的，是弥补数组构造函数 <code>Array()</code>  的不足。因为参数个数的不同，会导致 <code>Array()</code>  的行为有差异</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 2, 3 ]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//new Array () 如果传递一个参数时，表示 length</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1, 2, 3 ]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//Array () 如果传递一个参数时，表示 length</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ &lt;5 empty items> ]</span></pre></td></tr></table></figure><blockquote>\n<p><code>Array.of</code>  总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// []</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// []</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// []</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"array对象的方法\"><a class=\"anchor\" href=\"#array对象的方法\">#</a> Array 对象的方法</h4>\n<h5 id=\"copywithin方法\"><a class=\"anchor\" href=\"#copywithin方法\">#</a> copyWithin () 方法</h5>\n<blockquote>\n<p>用于浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小</p>\n</blockquote>\n<p><code>arr.copvWithin(target[start[,end]])</code></p>\n<ul>\n<li>作用\n<ul>\n<li>检索指定数组中从 start 到 end 区间的元素，复制到当前数组中的指定索引值</li>\n</ul>\n</li>\n<li>参数\n<ul>\n<li>target: 该参数的值最大等于当前数组的 length 属性值 - 1</li>\n<li>start: 表示当前截取开始的索引值\n<ul>\n<li>如果当前参数值省略，自动从数组的开始位置进行截取</li>\n</ul>\n</li>\n<li>end: 表示当前截取结束的索引值 (不包含当前索引值的元素)\n<ul>\n<li>如果当前参数值省略，自动截取到当前数组的最后</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意\n<ul>\n<li>该方法不能改变数组长度</li>\n<li>修改了原有数组</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// console.log(arr.copyWithin(3,0,4));//[ 1, 2, 3, 1, 2 ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// console.log(arr.copyWithin(0,3));// [ 4, 5, 3, 4, 5 ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2, 1, 2, 3 ]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"find与findlndex方法\"><a class=\"anchor\" href=\"#find与findlndex方法\">#</a> find () 与 findlndex () 方法</h5>\n<h6 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find()</h6>\n<blockquote>\n<p>返回数组中满足提供的测试函数的第一 个元素的值，否则返回 undefined。</p>\n</blockquote>\n<p><code>arr.find(callback[,thisArg])</code></p>\n<ul>\n<li>\n<p>作用</p>\n<ul>\n<li>返回 find () 方法的回调函数中符合表达式的第一 个元素的 <code>值</code></li>\n</ul>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>\n<p>callback: 在数组每一项上执行的函数，该函数接收三个参数。</p>\n<ul>\n<li>\n<p>element: 指定数组中每一项元素的值</p>\n</li>\n<li>\n<p>index: 指定数组中每一项元索的索引值</p>\n</li>\n<li>\n<p>array: 数组本身。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>thisArg: 可选，指定 callback 的 this 参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>数组调用 find () 方法，将指定数组进行遍历</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> index <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h6 id=\"findindex方法\"><a class=\"anchor\" href=\"#findindex方法\">#</a> findIndex () 方法</h6>\n<blockquote>\n<p>返回数组中满足提供的测试函数的第一 个元素的索引值，否则返回 - 1。</p>\n</blockquote>\n<p><code>arr.findIndex(callback[,thisArg])</code></p>\n<ul>\n<li>\n<p>作用</p>\n<ul>\n<li>返回符合表达式结果的第一个元素的 <code>索引值</code></li>\n</ul>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>\n<p>callback: 在数组每一项上执行的函数，该函数接收三个参数。</p>\n<ul>\n<li>\n<p>element: 指定数组中每一项元素的值</p>\n</li>\n<li>\n<p>index: 指定数组中每一项元索的索引值</p>\n</li>\n<li>\n<p>array: 数组本身。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>thisArg: 可选，指定 callback 的 this 参数。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>特点</p>\n<ul>\n<li>数组调用 findIndex () 方法，将指定数组进行遍历</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> index <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"fill方法\"><a class=\"anchor\" href=\"#fill方法\">#</a> fill () 方法</h5>\n<blockquote>\n<p>用一个固定值填充一 个数组中从起始索引到终止索引内的全部元素。不包括终止索引值。</p>\n</blockquote>\n<p><code>arr.fill(value[,start[,end]])</code></p>\n<ul>\n<li>\n<p>作用</p>\n<ul>\n<li>将指定内容替换指定数组中的指定位置</li>\n</ul>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>value: 用来填充数组元素的值。</li>\n<li>start: 可选项，起始索引，默认值为 0。</li>\n<li>end: 可选项，终止索引，默认值为 this.length。</li>\n</ul>\n</li>\n<li>\n<p>返回值</p>\n<ul>\n<li>修改后的数组。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 1, 6, 6, 4, 5 ] [ 1, 6, 6, 4, 5 ]</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"includes方法\"><a class=\"anchor\" href=\"#includes方法\">#</a> includes () 方法</h5>\n<blockquote>\n<p>用于判断 - 个数组是否包含一个指定的值。 根据情况，如果包含则返回 true, 否则返回 false。</p>\n</blockquote>\n<p><code>arr.includes(searchElement,fromlndex)</code></p>\n<ul>\n<li>\n<p>searchElement: 需要查找的元素值。</p>\n</li>\n<li>\n<p>fromlndex: 可选项，从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length - fromlndex 的索引开始搜索。默认为 0。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure>",
            "tags": [
                "ES6",
                "es6"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/6dd41c2b/index.html",
            "url": "http://www.dgredamancy.com/posts/6dd41c2b/index.html",
            "title": "字符串的扩展",
            "date_published": "2020-10-27T00:21:59.000Z",
            "content_html": "<h3 id=\"字符串的扩展\"><a class=\"anchor\" href=\"#字符串的扩展\">#</a> 字符串的扩展</h3>\n<h4 id=\"判断是否包含\"><a class=\"anchor\" href=\"#判断是否包含\">#</a> 判断是否包含</h4>\n<blockquote>\n<p>都区分大小写</p>\n</blockquote>\n<p> </p>\n<h5 id=\"includes方法\"><a class=\"anchor\" href=\"#includes方法\">#</a> includes () 方法</h5>\n<blockquote>\n<p>返回布尔值，表示是否找到了参数字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hebei baodingshi lianchiqu'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//includes (）方法是区别大小写</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'O'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"startswith方法\"><a class=\"anchor\" href=\"#startswith方法\">#</a> startsWith () 方法</h5>\n<blockquote>\n<p>返回布尔值，表示参数字符串是否在原字符串的头部</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hebei baodingshi lianchiqu'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hebei'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    startswidth (）方法不是表示指定字符串是以另一个字符串开始的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * 表示指定字符串的指定索引值开始是否以另一个字符串开始的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baodingshi'</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"endswith方法\"><a class=\"anchor\" href=\"#endswith方法\">#</a> endsWith () 方法</h5>\n<blockquote>\n<p>返回布尔值，表示参数字符串是否在原字符串的尾部</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hebei baodingshi lianchiqu'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hebei\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"重复字符串\"><a class=\"anchor\" href=\"#重复字符串\">#</a> 重复字符串</h4>\n<h5 id=\"repeat方法\"><a class=\"anchor\" href=\"#repeat方法\">#</a> repeat () 方法</h5>\n<blockquote>\n<p>用于将原字符串重复次，返回一个新字符串。</p>\n</blockquote>\n<ul>\n<li>number 为小数，向下取整的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//abcabc</span></pre></td></tr></table></figure><ul>\n<li>number 为 NaN，不报错</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有任何输出</span></pre></td></tr></table></figure><ul>\n<li>number 为负数，报错</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Invalid count value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>number 为 0，不报错</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有任何输出</span></pre></td></tr></table></figure><ul>\n<li>number 为字符串，先转换成数字值</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//abcabcabc</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"模板字符串\"><a class=\"anchor\" href=\"#模板字符串\">#</a> 模板字符串</h4>\n<h5 id=\"模板字符串是什么\"><a class=\"anchor\" href=\"#模板字符串是什么\">#</a> 模板字符串是什么</h5>\n<p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p>\n<h5 id=\"多行模板字符串\"><a class=\"anchor\" href=\"#多行模板字符串\">#</a> 多行模板字符串</h5>\n<ul>\n<li>ES5\n<ul>\n<li>字符串如果需要输出多行的话，需要使用字符串的拼接实现。</li>\n</ul>\n</li>\n<li>ES6\n<ul>\n<li>字符串如果需要输出多行的话，只需要使用模板字符串即可。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个普通字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">'this is\\nstring'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    this is</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> str4 <span class=\"token operator\">=</span> <span class=\"token string\">'this is'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token operator\">+</span><span class=\"token string\">'string'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//this isstring</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 定义一个模版字符串 - 充当多行普通字符串来使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> str5 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>this is</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            string</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span><span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 定义一个普通字符升</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> str6 <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello 张无忌！</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 定义一个模版字符串</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">let</span> str7 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> !</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello 张无忌！</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"带表达式的模板字符串\"><a class=\"anchor\" href=\"#带表达式的模板字符串\">#</a> 带表达式的模板字符串</h5>\n<p>在普通字符串中嵌入表达式，需要通字符串的过拼接操作来实现。</p>\n<p>通过模板字符串，嵌入变量需要将变量名写在 $ 之中。</p>\n<p> </p>\n<h5 id=\"带标签的模板字符串\"><a class=\"anchor\" href=\"#带标签的模板字符串\">#</a> 带标签的模板字符串</h5>\n<p>模板字符串的功能可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'console'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 普通字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is '</span> <span class=\"token operator\">+</span>str<span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this is console.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 模版字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this is console.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 带标签的模板字符串 - 用于处理模版字符串的方法 (输出到控制台)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span>log<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 'this is ', '.' ] console</span></pre></td></tr></table></figure><blockquote>\n<p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签” 指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n</blockquote>\n<p> </p>\n<h5 id=\"原始字符串\"><a class=\"anchor\" href=\"#原始字符串\">#</a> 原始字符串</h5>\n<p>在标签函数的第一个参数中，存在一个特殊的属性 <code>raw</code> ，可以通过它来访问模板字符串的原始字符串，而不经过特殊字符的替换。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'function'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [ 'this is function' ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">)</span><span class=\"token comment\">// [ 'this is function' ]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fn<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is function</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this is function.</span></pre></td></tr></table></figure><blockquote>\n<p>所谓的原始字符串是模版字符串被定义时的内容，而不是处理之后的内容</p>\n</blockquote>\n",
            "tags": [
                "ES6",
                "es6"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/a6cc2f2b/index.html",
            "url": "http://www.dgredamancy.com/posts/a6cc2f2b/index.html",
            "title": "变量的解构赋值",
            "date_published": "2020-10-27T00:19:53.000Z",
            "content_html": "<h3 id=\"变量的解构赋值\"><a class=\"anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h3>\n<h4 id=\"变量的解构赋值-2\"><a class=\"anchor\" href=\"#变量的解构赋值-2\">#</a> 变量的解构赋值</h4>\n<h5 id=\"解构赋值是什么\"><a class=\"anchor\" href=\"#解构赋值是什么\">#</a> 解构赋值是什么</h5>\n<blockquote>\n<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span><span class=\"token operator\">/</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>变量名称<span class=\"token number\">1</span>，变量名称<span class=\"token number\">2</span>，<span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> 数组或对象</pre></td></tr></table></figure><blockquote>\n<p>本质上，这种写法属于 “模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p>\n</blockquote>\n<p> </p>\n<h5 id=\"解构赋值失败\"><a class=\"anchor\" href=\"#解构赋值失败\">#</a> 解构赋值失败</h5>\n<p>如果解构不成功，变量的值就等于 <code>undefined</code></p>\n<p>解构赋值失败 - 定义变量的数量大于值的数量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1 undefined</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"不完全解构赋值\"><a class=\"anchor\" href=\"#不完全解构赋值\">#</a> 不完全解构赋值</h5>\n<p>等号左边的模式，只匹配一部分的等号右边的数组</p>\n<p>不完全解构赋值 – 定义变量的数量小于值的数量</p>\n<blockquote>\n<p>解构依然可以成功</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1 2</span></pre></td></tr></table></figure><h5 id=\"默认值\"><a class=\"anchor\" href=\"#默认值\">#</a> 默认值</h5>\n<p>解构赋值允许指定默认值</p>\n<p>解构赋值失败时，变量的默认值为 undefined<br />\n 默认值–指的就是在解构赋值失败时，重写 undefined 默认值</p>\n<blockquote>\n<p>ES6 内部使用严格相等运算符（ <code>===</code> ），判断一个位置是否有值。所以，只有当一个数组成员严格等于 <code>undefined</code> ，默认值才会生效</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 10 100</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// ES6 底层将为变量赋值的值与 undefined 进行比较 (全等于)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span>n <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<blockquote>\n<p>ES6 底层将为变量赋值的值只是与 <code>undefined</code>  进行比较 (null 等没有意义的)</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">,</span>w<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10 null</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"对象的解构赋值\"><a class=\"anchor\" href=\"#对象的解构赋值\">#</a> 对象的解构赋值</h4>\n<blockquote>\n<p>解构不仅仅可以用于数组，也可以用于对象</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    y<span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10 20</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"对象的解构赋值-2\"><a class=\"anchor\" href=\"#对象的解构赋值-2\">#</a> 对象的解构赋值</h5>\n<blockquote>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n</blockquote>\n<ul>\n<li>数组 [] = 对象 {}</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    m<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    n<span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// &#123;(intermediate value)(intermediate value)&#125; is not iterable</span></pre></td></tr></table></figure><ul>\n<li 函数=\"\">对象 {} = 对象</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    m<span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">n</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 100 10</span></pre></td></tr></table></figure><ul>\n<li>数组 [] = 数组 [函数]</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 100 10</span></pre></td></tr></table></figure><ul>\n<li 对象,函数=\"\">对象 {} = 对象</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    m<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token string\">'张无忌'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">n</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 张无忌 10</span></pre></td></tr></table></figure><ul>\n<li>数组 [] = 数组 [对象，函数]</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'张无忌'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><ul>\n<li>数组 [] = 数组 [数组]</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2 ] 3</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 等价于 let [a,b,c] = [1,2,3]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 3</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"解构赋值失败-2\"><a class=\"anchor\" href=\"#解构赋值失败-2\">#</a> 解构赋值失败</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    m<span class=\"token operator\">:</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100 undefined</span></pre></td></tr></table></figure><blockquote>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>y<span class=\"token operator\">:</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"默认值-2\"><a class=\"anchor\" href=\"#默认值-2\">#</a> 默认值</h5>\n<blockquote>\n<p>对象的解构赋值也可以指定默认值。默认值生效的条件是对象的属性值全等于 undefined。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x<span class=\"token operator\">:</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 100</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"注意点参考阮一峰的ecmascript-6-入门\"><a class=\"anchor\" href=\"#注意点参考阮一峰的ecmascript-6-入门\">#</a> 注意点 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvZGVzdHJ1Y3R1cmluZw==\">参考阮一峰的 ECMAScript 6 入门</span>)</h5>\n<ul>\n<li>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误的写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 正确的写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>因为 JavaScript 引擎会将 <code>&#123;x&#125;</code>  理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n</blockquote>\n<ul>\n<li>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span> <span class=\"token operator\">:</span> first<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> last<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 3</span></pre></td></tr></table></figure><blockquote>\n<p>数组 <code>arr</code>  的 <code>0</code>  键对应的值是 <code>1</code> ， <code>[arr.length - 1]</code>  就是 <code>2</code>  键，对应的值是 <code>3</code></p>\n</blockquote>\n<p> </p>\n<h4 id=\"字符串的解构赋值\"><a class=\"anchor\" href=\"#字符串的解构赋值\">#</a> 字符串的解构赋值</h4>\n<blockquote>\n<p>字符串被转换成了一个类似数组的对象</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span>  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"xyz\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// x y z</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span>  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"xxyyzz\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// x x y</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span>  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"大前端了\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 大 前 端</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"数值与布尔值的解构赋值\"><a class=\"anchor\" href=\"#数值与布尔值的解构赋值\">#</a> 数值与布尔值的解构赋值</h4>\n<p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象.</p>\n<p><code>规则</code> :</p>\n<p>​\t\t解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于 <code>undefined</code>  和 <code>null</code>  无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/26/be18e340f48f22e139142305dc9cc96e.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数字值或布尔值的解构赋值 - 先将数字值或布尔值转换成对象类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span><span class=\"token punctuation\">&#123;</span>toString<span class=\"token operator\">:</span>m<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//100 本身就是 number 类型对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token comment\">// [Function: toString]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span>  <span class=\"token punctuation\">&#123;</span>toString<span class=\"token operator\">:</span>x<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"函数参数的解构赋值\"><a class=\"anchor\" href=\"#函数参数的解构赋值\">#</a> 函数参数的解构赋值</h4>\n<h5 id=\"函数参数的解构赋值-2\"><a class=\"anchor\" href=\"#函数参数的解构赋值-2\">#</a> 函数参数的解构赋值</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数定义 – 形参，相当于在函教作用域中定义了一个局部变量 (没有赋值)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10 20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 函数调用 – 实参，相当于在函数作用域中为定义的变量进行赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>形参传入什么格式在实参用相同的格式进行匹配</p>\n</blockquote>\n<p> </p>\n<h5 id=\"默认值-3\"><a class=\"anchor\" href=\"#默认值-3\">#</a> 默认值</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 8]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 0]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 0]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 0]</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"小括号的问题\"><a class=\"anchor\" href=\"#小括号的问题\">#</a> 小括号的问题</h4>\n<h5 id=\"小括号的问题-2\"><a class=\"anchor\" href=\"#小括号的问题-2\">#</a> 小括号的问题</h5>\n<p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<p> </p>\n<h5 id=\"不能使用小括号的情况\"><a class=\"anchor\" href=\"#不能使用小括号的情况\">#</a> 不能使用小括号的情况</h5>\n<ul>\n<li>变量声明语句</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全部报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> c<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> o<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> p<span class=\"token operator\">:</span> p <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> o<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> p<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<ul>\n<li>函数参数</li>\n</ul>\n<blockquote>\n<p>函数参数也属于变量声明，因此不能带有圆括号</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<ul>\n<li>赋值语句的模式</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全部报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> p<span class=\"token operator\">:</span> a <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> p<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"可以使用它小括号的情况\"><a class=\"anchor\" href=\"#可以使用它小括号的情况\">#</a> 可以使用它小括号的情况</h5>\n<blockquote>\n<p>赋值语句的非模式部分，可以使用小括号</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> p<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"解构赋值的用途\"><a class=\"anchor\" href=\"#解构赋值的用途\">#</a> 解构赋值的用途</h4>\n<ul>\n<li>交换变量的值</li>\n</ul>\n<blockquote>\n<p>解构赋值可用于两个变量之间交换值。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2 1</span></pre></td></tr></table></figure><p> </p>\n<ul>\n<li>\n<p>从函数返回多个值</p>\n<blockquote>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。如果使用解构赋值的话，很容易实现函数返回多个值</p>\n</blockquote>\n<ul>\n<li>返回一个数组</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 3</span></pre></td></tr></table></figure><ul>\n<li>返回一个对象</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a1<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        b2<span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> a1<span class=\"token punctuation\">,</span> b2 <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2</span></pre></td></tr></table></figure><p> </p>\n</li>\n<li>\n<p>函数参数的定义</p>\n<blockquote>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n</blockquote>\n<ul>\n<li>参数是一组有次序的值</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数是一组无次序的值</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>q<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 2 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>e<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> w<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n</li>\n<li>\n<p>函数参数的默认值</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jQuery<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ajax</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  async <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">beforeSend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cache <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">complete</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  crossDomain <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  global <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// ... more config</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// ... do stuff</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>指定参数的默认值，就避免了在函数体内部再写 <code>var foo = config.foo || 'default foo';</code>  这样的语句。</p>\n</blockquote>\n<p> </p>\n<ul>\n<li>提取 JSON 数据</li>\n</ul>\n<blockquote>\n<p>解构赋值对于提取 JSON 对象中的数据内容尤其有用。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> jsonData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  job<span class=\"token operator\">:</span> <span class=\"token string\">\"教主\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> jsonData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 张无忌 11 教主</span></pre></td></tr></table></figure><p> </p>\n",
            "tags": [
                "ES6",
                "es6",
                "解构赋值"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/857c6d2e/index.html",
            "url": "http://www.dgredamancy.com/posts/857c6d2e/index.html",
            "title": "块级作用域",
            "date_published": "2020-10-27T00:17:06.000Z",
            "content_html": "<h3 id=\"块级作用域\"><a class=\"anchor\" href=\"#块级作用域\">#</a> 块级作用域</h3>\n<blockquote>\n<p>所谓的块级作用域，可能是一个 <code>&#123;&#125;</code> , 一个代码块，一句话</p>\n</blockquote>\n<p> </p>\n<h4 id=\"let关键字\"><a class=\"anchor\" href=\"#let关键字\">#</a> let 关键字</h4>\n<h5 id=\"let-与-var-区别\"><a class=\"anchor\" href=\"#let-与-var-区别\">#</a> let 与 var 区别</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">区别</th>\n<th style=\"text-align:center\">var</th>\n<th style=\"text-align:center\">let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">变量提升</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用域</td>\n<td style=\"text-align:center\">全局作用域、函数作用域</td>\n<td style=\"text-align:center\">全局作用域、函数作用域和块级作用域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">提前声明</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重复声明</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重新赋值</td>\n<td style=\"text-align:center\">有</td>\n<td style=\"text-align:center\">有</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>let 或 const 没有声明提前，相当于 <code>暂时性死区(TDZ)</code></p>\n</blockquote>\n<p> </p>\n<h5 id=\"与函数的关系\"><a class=\"anchor\" href=\"#与函数的关系\">#</a> 与函数的关系</h5>\n<ul>\n<li><code>var</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>let</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 函数作用域封闭–全局作用域中的变量与当前函数作用域无关</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Cannot access 'v' before initialization</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 let 关键字全局的变量和当前的无关 ( <code>封闭</code> )</p>\n</blockquote>\n<p> </p>\n<h4 id=\"块级作用域-2\"><a class=\"anchor\" href=\"#块级作用域-2\">#</a> 块级作用域</h4>\n<blockquote>\n<p>块级作用域只能用 <code>let</code>  关键字，但是 <code>let</code>  关键字用在全局作用域、函数作用域、块级作用域中</p>\n</blockquote>\n<p> </p>\n<h5 id=\"为什么需要块级作用域\"><a class=\"anchor\" href=\"#为什么需要块级作用域\">#</a> 为什么需要块级作用域</h5>\n<ul>\n<li>\n<p>局部变量可能覆盖全局变量</p>\n</li>\n<li>\n<p>在循环体中用于计数的变量泄露为全局变量</p>\n</li>\n</ul>\n<p> </p>\n<h5 id=\"循环语句与数组的关系\"><a class=\"anchor\" href=\"#循环语句与数组的关系\">#</a> 循环语句与数组的关系</h5>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/26/BndJeS.png\" alt=\"æ æ é¢\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> i</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p> </p>\n",
            "tags": [
                "ES6",
                "es6",
                "块级作用域"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/b3bfdbe7/index.html",
            "url": "http://www.dgredamancy.com/posts/b3bfdbe7/index.html",
            "title": "ECMA6是什么",
            "date_published": "2020-10-27T00:10:58.000Z",
            "content_html": "<h3 id=\"ecma6是什么\"><a class=\"anchor\" href=\"#ecma6是什么\">#</a> ECMA6 是什么</h3>\n<h4 id=\"ecma6是什么-2\"><a class=\"anchor\" href=\"#ecma6是什么-2\">#</a> ECMA6 是什么</h4>\n<blockquote>\n<p>JavaScript 语言的下一代标准</p>\n</blockquote>\n<p>ES6 的目标，是使得 JavaScript 语言可以用来编写大型的复杂的应用程序，成为企业级开发语言。</p>\n<hr />\n<h5 id=\"ecmascript-和-javascript-的关系\"><a class=\"anchor\" href=\"#ecmascript-和-javascript-的关系\">#</a> ECMAScript 和 JavaScript 的关系</h5>\n<p>ECMAScript 是 JavaScript 语言的国际标准</p>\n<p>JavaScript 是 ECMAScript 的实现。</p>\n<p> </p>\n<h5 id=\"ecma的发展历史\"><a class=\"anchor\" href=\"#ecma的发展历史\">#</a> ECMA 的发展历史</h5>\n<ul>\n<li>\n<p>1998 年 6 月，ECMAScript 2.0 版发布。</p>\n</li>\n<li>\n<p>1999 年 12 月，ECMAScript 3.0 版发布，成为 JavaScript 的通行标准，得到了广泛支持。</p>\n</li>\n<li>\n<p>2007 年 10 月，ECMAScript 4.0 版草案发布，对 3.0 版做了大幅升级，预计次年 8 月发布正式版本。</p>\n</li>\n<li>\n<p>2008 年 7 月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA 开会决定，中止 ECMAScript 4.0 的开发</p>\n</li>\n<li>\n<p>2009 年 12 月，ECMAScript 5.0 版正式发布。</p>\n</li>\n<li>\n<p>2011 年 6 月，ECMAscript 5.1 版发布，并且成为 ISO 国际标准（ISO/IEC 16262:2011）。</p>\n</li>\n<li>\n<p>2013 年 3 月，ECMAScript 6 草案冻结，不再添加新功能。新的功能设想将被放到 ECMAScript 7。</p>\n</li>\n<li>\n<p>2013 年 12 月，ECMAScript 6 草案发布。然后是 12 个月的讨论期，听取各方反馈。</p>\n</li>\n<li>\n<p>2015 年 6 月，ECMAScript 6 正式通过，成为国际标准。</p>\n</li>\n</ul>\n<p> </p>\n<h4 id=\"babel编译器\"><a class=\"anchor\" href=\"#babel编译器\">#</a> Babel 编译器</h4>\n<h5 id=\"babel是什么\"><a class=\"anchor\" href=\"#babel是什么\">#</a> Babel 是什么</h5>\n<p>是一个广泛使用的 ES6 转码器 (编译器)，可以 ES6 代码转为 ES5 代码，从而在浏览器或其他环境执行</p>\n<p> </p>\n<h5 id=\"安装babel\"><a class=\"anchor\" href=\"#安装babel\">#</a> 安装 Babel</h5>\n<pre><code class=\"language-cmd\">$ npm install --global babel 或 npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre>\n<p> </p>\n<h5 id=\"配置babel\"><a class=\"anchor\" href=\"#配置babel\">#</a> 配置 Babel</h5>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"latest\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"babel-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"babel-preset-latest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.24.1\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src -d lib\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p> </p>\n<h5 id=\"babel-cli转码\"><a class=\"anchor\" href=\"#babel-cli转码\">#</a> babel-cli 转码</h5>\n<ul>\n<li>src 目录：用于放置 ECMAScript 6 的代码文件。</li>\n<li>lib 目录：用于放置通过 Babel 转码后的代码文件。</li>\n</ul>\n<pre><code class=\"language-cmd\">npm run build\n</code></pre>\n<p> </p>\n",
            "tags": [
                "ES6",
                "es6",
                "es5",
                "javascript",
                "babel"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/12fb90db/index.html",
            "url": "http://www.dgredamancy.com/posts/12fb90db/index.html",
            "title": "Nginx 代理的补充",
            "date_published": "2020-10-25T06:28:18.000Z",
            "content_html": "<h3 id=\"nginx-代理的补充\"><a class=\"anchor\" href=\"#nginx-代理的补充\">#</a> Nginx 代理的补充</h3>\n<h4 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>最近重新回顾 nodejs 需要用到 <code>Nginx</code>  部分，看到代理，居然发现还有好多没有弄懂的，找资料补充一下</p>\n<p> </p>\n<hr />\n<p> </p>\n<p>安装神马的就不介绍了，主要看的是正向代理、反向代理、区别和配置基本介绍</p>\n<p> </p>\n<h4 id=\"正向代理\"><a class=\"anchor\" href=\"#正向代理\">#</a> 正向代理</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/25/c6afcf15db3dc990c62330910fba7043.png\" alt=\"\" /></p>\n<blockquote>\n<p>客户端不能直接访问 Internet, 要代理服务器来访问</p>\n<p>简单点说就是浏览器访问国外的内容，需要通过 VPN,  <code>VPN</code>  就是正向代理</p>\n</blockquote>\n<p> </p>\n<h4 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/25/9f8d92dff440f1ec98a490538157594b.png\" alt=\"\" /></p>\n<blockquote>\n<p>客户端想要访问 Internet 提供的资源，必须通过一个代理的服务器来进行</p>\n</blockquote>\n<p> </p>\n<h4 id=\"正向代理和反向代理的区别\"><a class=\"anchor\" href=\"#正向代理和反向代理的区别\">#</a> 正向代理和反向代理的区别</h4>\n<p><code>正向代理</code>   --   <code>客户端</code></p>\n<p><code>反向代理</code>   --   <code>服务器</code></p>\n<p> </p>\n<h4 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h4>\n<ul>\n<li>\n<p>找到 C:\\Windows\\System32\\drivers\\etc, 修改 hosts 文件，将要展示的址映射到  <code>127.0.0.1</code></p>\n<pre><code class=\"language-cmd\">127.0.0.1 展示的地址\n</code></pre>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/25/1323937a88399f6dbe327653b2b161e7.png\" alt=\"\" /></p>\n<ul>\n<li>在安装 Nginx 软件的文件下找到  <code>nginx.conf</code>  (我的在 D:\\nginx\\nginx-1.18.0\\conf)</li>\n</ul>\n<pre><code class=\"language-conf\"> server &#123;\n\tlisten       80;\n\tserver_name  展示的地址;\n\n\tlocation / &#123;\n\troot   html;//本地的地址127.0.0.1\n\tindex  index.html index.htm;\n\t&#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "HTTP",
                "http",
                "nginx",
                "正向代理",
                "反向代理"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/10354652/index.html",
            "url": "http://www.dgredamancy.com/posts/10354652/index.html",
            "title": "nodejs 连接 mysql数据库",
            "date_published": "2020-10-22T02:47:30.000Z",
            "content_html": "<h4 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>细化一下过程</p>\n<hr />\n<h3 id=\"nodejs-连接-mysql数据库\"><a class=\"anchor\" href=\"#nodejs-连接-mysql数据库\">#</a> nodejs 连接 mysql 数据库</h3>\n<h4 id=\"安装命令\"><a class=\"anchor\" href=\"#安装命令\">#</a> 安装命令</h4>\n<p>在指定文件夹下安装  <code>mysql</code></p>\n<pre><code class=\"language-cmd\">npm init -y\n\nnpm i mysql --registry=https://registry.npm.taobao.org\n</code></pre>\n<p> </p>\n<h4 id=\"引用命令\"><a class=\"anchor\" href=\"#引用命令\">#</a> 引用命令</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/22/41bf3d272e3d5c338667be83cc6104ce.png\" alt=\"\" /></p>\n<p>安装完 mysql 之后，肯定要引用 mysql</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"创建链接对象\"><a class=\"anchor\" href=\"#创建链接对象\">#</a> 创建链接对象</h4>\n<p>这一步是连接你的 mysql 数据库，需要提前开启数据库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> con <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//host 名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    user<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户名名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    password<span class=\"token operator\">:</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户名密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 端口号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    database<span class=\"token operator\">:</span> <span class=\"token string\">'myblog'</span><span class=\"token comment\">// 数据库名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"开始连接\"><a class=\"anchor\" href=\"#开始连接\">#</a> 开始连接</h4>\n<p>在创建完之后，开始连接数据库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"执行-sql-语句\"><a class=\"anchor\" href=\"#执行-sql-语句\">#</a> 执行 sql 语句</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">'mysql语句'</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"异步操作\"><a class=\"anchor\" href=\"#异步操作\">#</a> 异步操作</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p> </p>\n<h4 id=\"关闭连接\"><a class=\"anchor\" href=\"#关闭连接\">#</a> 关闭连接</h4>\n<p>操作完一条 sql 语句之后，要关闭连接</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Nodejs",
                "nodejs",
                "mysql数据库"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/3344e12c/index.html",
            "url": "http://www.dgredamancy.com/posts/3344e12c/index.html",
            "title": "JavaScript冒泡排序",
            "date_published": "2020-10-10T08:56:20.000Z",
            "content_html": "<h2 id=\"javascript冒泡排序\"><a class=\"anchor\" href=\"#javascript冒泡排序\">#</a> JavaScript 冒泡排序</h2>\n<h3 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h3>\n<blockquote>\n<p>数组中有 n 个数，比较每相邻两个数，如果前者大于后者，就把两个数交换位置；这样一来，第一轮就可以选出一个最大的数放在最后面；那么经过 n-1（数组的 length - 1） 轮，就完成了所有数的排序。</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/10/f628dbec875f42934adc4217c2d5f29c.png\" alt=\"\" /></p>\n<ul>\n<li>先实现找数组中的最大数，并将其放至数组的最后面</li>\n</ul>\n<pre><code class=\"language-JavaScript\">var arr = [3,4,1,2];\n// 遍历数组，次数就是arr.length - 1\nfor (var i = 0; i &lt; arr.length - 1; i++) &#123;\n\t// 如果前一个数 大于 后一个数 就交换两数位置\n\tif (arr[i] &gt; arr[i + 1]) &#123;\n\t\tvar temp = arr[i];\n\t\tarr[i] = arr[i + 1];\n\t\tarr[i + 1] = temp;\n\t&#125;\n&#125;\nconsole.log(arr)  // [3, 1, 2, 4]\n</code></pre>\n<ul>\n<li>找到数组中最大的数，放到最后，这样重复  <code>arr.length - 1</code>  次，可以实现数组按从小到大的顺序</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 遍历数组，次数就是 arr.length - 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 这里 i &lt; arr.length - 1 ，要思考思考合适吗？我们下面继续说</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1,2,3,4]</span></pre></td></tr></table></figure><ul>\n<li>上面的代码虽然已经实现冒泡排序了，但就像注释中提到的，内层 for 循环的次数写成， <code>i &lt; arr.length - 1</code>  ， 我们想一下，是否合适？当第一次，找到最大数，放到最后，那么下一次，遍历的时候，是不是就不能把最后一个数算上了呢？因为他就是最大的了，不会出现，前一个数比后一个数大，要交换位置的情况，所以内层 for 循环的次数，改成  <code>i &lt; arr.length - 1 -j</code>  ，才合适</li>\n</ul>\n<pre><code class=\"language-JavaScript\">var arr = [3, 4, 1, 2];\nfunction bubbleSort (arr) &#123;\n  for (var j = 0; j &lt; arr.length - 1; j++) &#123;\n    // 这里要根据外层for循环的 j，逐渐减少内层 for循环的次数\n    for (var i = 0; i &lt; arr.length - 1 - j; i++) &#123;\n      if (arr[i] &gt; arr[i + 1]) &#123;\n        var temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n      &#125;\n    &#125;\n  &#125;\n  return arr;\n&#125;\nbubbleSort(arr);\n</code></pre>\n<ul>\n<li>我们想下这个情况，当原数组是，  <code>arr = [1,2,4,3];</code>  在经过第一轮冒泡排序之后，数组就变成了  <code>arr = [1,2,3,4];</code>  此时，数组已经排序完成了，但是按上面的代码来看，数组还会继续排序，所以我们加一个标志位，如果某次循环完后，没有任何两数进行交换，就将标志位 设置为 true，表示排序完成，这样我们就可以减少不必要的排序，提高性能。</li>\n</ul>\n<p> </p>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h3>\n<pre><code class=\"language-JavaScript\">var arr = [3, 4, 1, 2];\nfunction bubbleSort (arr) &#123;\n  var max = arr.length - 1;\n  for (var j = 0; j &lt; max; j++) &#123;\n    // 声明一个变量，作为标志位\n    var done = true;\n    for (var i = 0; i &lt; max - j; i++) &#123;\n      if (arr[i] &gt; arr[i + 1]) &#123;\n        var temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        done = false;\n      &#125;\n    &#125;\n    if (done) &#123;\n      break;\n    &#125;\n  &#125;\n  return arr;\n&#125;\nbubbleSort(arr);\n</code></pre>\n<p> </p>\n<h3 id=\"性能\"><a class=\"anchor\" href=\"#性能\">#</a> 性能</h3>\n<ul>\n<li><strong>时间复杂度：</strong>  <code>平均时间复杂度O(n*n) 、最好情况O(n)、最差情况O(n*n)</code>\n<ul>\n<li>时间复杂度指的是一个算法执行所耗费的时间</li>\n</ul>\n</li>\n<li><strong>空间复杂度：</strong> O(1)\n<ul>\n<li>空间复杂度指运行完一个程序所需内存的大小</li>\n</ul>\n</li>\n<li><strong>稳定性：</strong> 稳定\n<ul>\n<li>稳定指，如果 a=b,a 在 b 的前面，排序后 a 仍然在 b 的前面</li>\n<li>不稳定指，如果 a=b，a 在 b 的前面，排序后可能会交换位置</li>\n</ul>\n</li>\n</ul>\n<p> </p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>1、外层 for 循环控制循环次数<br />\n 2、内层 for 循环进行两数交换，找每次的最大数，排到最后<br />\n 3、设置一个标志位，减少不必要的循环</p>\n",
            "tags": [
                "JavaScript",
                "JavaScript",
                "冒泡排序"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/fb1543b6/index.html",
            "url": "http://www.dgredamancy.com/posts/fb1543b6/index.html",
            "title": "如何提高搜索效率?",
            "date_published": "2020-10-07T01:57:51.000Z",
            "content_html": "<h3 id=\"如何提高搜索效率\"><a class=\"anchor\" href=\"#如何提高搜索效率\">#</a> 如何提高搜索效率？</h3>\n<p> </p>\n<h4 id=\"google\"><a class=\"anchor\" href=\"#google\">#</a> Google</h4>\n<h5 id=\"1逻辑关系与或\"><a class=\"anchor\" href=\"#1逻辑关系与或\">#</a> 1. 逻辑关系 (与 / 或)</h5>\n<p>谷歌默认的就是 <code>与的逻辑搜索</code> ，进行搜索时，关键词都会出现在页面搜所结果中</p>\n<blockquote>\n<p>关键字 OR 关键字 OR 关键字</p>\n</blockquote>\n<p> </p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/08/2039de789b85d66e4703435b29fbe56f.png\" alt=\"\" /></p>\n<h5 id=\"2精确查找\"><a class=\"anchor\" href=\"#2精确查找\">#</a> 2. 精确查找 (&quot; &quot;)</h5>\n<p>在关键词两边分别加一个 <code>「引号(&quot;&quot;)」</code> , 能快速的进行关键词的匹配</p>\n<blockquote>\n<p>&quot;关键字&quot;</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/08/c96c4916b9d938b5faeef923ca0345fd.png\" alt=\"\" /></p>\n</blockquote>\n<p> </p>\n<h5 id=\"3搜索的关键字包含在网页标题中intitle\"><a class=\"anchor\" href=\"#3搜索的关键字包含在网页标题中intitle\">#</a> 3. 搜索的关键字包含在网页标题中 (intitle)</h5>\n<p>对关键词包含在  <code>title</code>  中的搜索</p>\n<blockquote>\n<p>intitle : 搜索内容</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0wehSf.png\" alt=\"20200626160910851\" /></p>\n<p> </p>\n<h5 id=\"4-使用同义词~\"><a class=\"anchor\" href=\"#4-使用同义词~\">#</a> 4. 使用同义词 (~)</h5>\n<p>谷歌内置的 <code>优化方法</code></p>\n<blockquote>\n<p>~ 关键字</p>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0we4l8.png\" alt=\"20200626160640925\" /></p>\n</blockquote>\n<p> </p>\n<h5 id=\"5使用限定文件格式filetype\"><a class=\"anchor\" href=\"#5使用限定文件格式filetype\">#</a> 5. 使用限定文件格式 (filetype)</h5>\n<p>找一些 <code>文件格式</code> 的文件</p>\n<blockquote>\n<p>关键字 filetype:doc OR filetype:xls OR filetype:ppt OR filetype:pdf</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0weIOg.png\" alt=\"20200626160835693\" /></p>\n<p> </p>\n<h5 id=\"6使用减号非来进行搜索\"><a class=\"anchor\" href=\"#6使用减号非来进行搜索\">#</a> 6. 使用减号 (非) 来进行搜索</h5>\n<p>搜索的网页中 <code>不包含</code> 一些关键词</p>\n<blockquote>\n<p>搜索内容 - 关键字 - 关键字</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0we7wj.png\" alt=\"20200626161109125\" /></p>\n<p> </p>\n<h5 id=\"7限定网站域名搜索site\"><a class=\"anchor\" href=\"#7限定网站域名搜索site\">#</a> 7. 限定网站域名搜索 (site)</h5>\n<p>用于在某一个 <code>网站</code> 搜索相关内容</p>\n<blockquote>\n<p>搜索内容  site : <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54eHguY29t\">www.xxx.com</span><br />\n 搜索内容  site : .com</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0weHTs.png\" alt=\"20200626161845167\" /></p>\n<p> </p>\n<h5 id=\"8其他\"><a class=\"anchor\" href=\"#8其他\">#</a> 8. 其他</h5>\n<h6 id=\"计算器\"><a class=\"anchor\" href=\"#计算器\">#</a> 计算器</h6>\n<blockquote>\n<p>(1+1)*1</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0weqkn.png\" alt=\"20200626161358567\" /></p>\n<h6 id=\"单词短语的翻译\"><a class=\"anchor\" href=\"#单词短语的翻译\">#</a> 单词短语的翻译</h6>\n<blockquote>\n<p>define: 单词</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2020/10/08/0weLYq.png\" alt=\"20200626161439615\" /></p>\n<h4 id=\"百度baidu\"><a class=\"anchor\" href=\"#百度baidu\">#</a> 百度 (baidu)</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chch455/tuchuang/2020/10/08/cc6a41b0e748241dd88d9944b3596507.png\" alt=\"\" /></p>\n<h5 id=\"1a-b\"><a class=\"anchor\" href=\"#1a-b\">#</a> 1.‘A -B’</h5>\n<ul>\n<li>作用：搜索 A 屏蔽 B 的信息</li>\n<li>例如：科学 - 技术</li>\n</ul>\n<blockquote>\n<p><em>-</em>  前必须有空格</p>\n</blockquote>\n<h5 id=\"2a-b\"><a class=\"anchor\" href=\"#2a-b\">#</a> 2.‘A | B’</h5>\n<ul>\n<li>作用：搜索包含 A 的信息或者包含 B 的信息</li>\n<li>例如：学习 | 知识</li>\n</ul>\n<h5 id=\"3a-intitleb\"><a class=\"anchor\" href=\"#3a-intitleb\">#</a> 3.‘A intitle:B’</h5>\n<ul>\n<li>作用：把搜索范围限定在网页标题</li>\n<li>例如 : ps intitle: 技巧</li>\n</ul>\n<blockquote>\n<p>‘intitle:’后面不能有空格</p>\n</blockquote>\n<h5 id=\"4a-site站点域名\"><a class=\"anchor\" href=\"#4a-site站点域名\">#</a> 4.‘A site: 站点域名’</h5>\n<ul>\n<li>作用：将搜索范围界定在指定网站中率</li>\n<li>例如：百度杀毒 site:www.skycn.com</li>\n</ul>\n<h5 id=\"5-a-inurl特定url\"><a class=\"anchor\" href=\"#5-a-inurl特定url\">#</a> 5.‘: A inurl: 特定 url’</h5>\n<ul>\n<li>作用：将搜索范围界定到 Url 链接中</li>\n<li>例如：帮助 inurl:baidu.com</li>\n</ul>\n<h5 id=\"6aa\"><a class=\"anchor\" href=\"#6aa\">#</a> 6.‘A’《A》</h5>\n<ul>\n<li>作用：将搜索范围更精确的指定到所要查的内容中，避免关键词被拆分</li>\n<li>例如 : “三国演义 &quot; 《三国演义》不加书名号也可能是电视剧</li>\n</ul>\n<h5 id=\"7-a-filetype文件类型\"><a class=\"anchor\" href=\"#7-a-filetype文件类型\">#</a> 7. A filetype: 文件类型</h5>\n<ul>\n<li>作用：搜索该类型的文档资料</li>\n<li>例如：实习报告 file:doc</li>\n</ul>\n<blockquote>\n<p>百度文档搜索界面 (<span class=\"exturl\" data-url=\"aHR0cDovL2ZpbGUuYmFpZHUuY29t\">http://file.baidu.com</span> )</p>\n</blockquote>\n<h5 id=\"8-电影名迅雷下载\"><a class=\"anchor\" href=\"#8-电影名迅雷下载\">#</a> 8. 电影名迅雷下载</h5>\n<ul>\n<li>作用：用迅雷下载电影</li>\n<li>例如：三国演义迅雷下载</li>\n</ul>\n",
            "tags": [
                "其他",
                "Google",
                "百度",
                "搜索"
            ]
        },
        {
            "id": "http://www.dgredamancy.com/posts/1bf242e0/index.html",
            "url": "http://www.dgredamancy.com/posts/1bf242e0/index.html",
            "title": "使用nodejs操作mysql数据库",
            "date_published": "2020-10-06T09:11:12.000Z",
            "content_html": "<h3 id=\"使用nodejs操作mysql数据库\"><a class=\"anchor\" href=\"#使用nodejs操作mysql数据库\">#</a> 使用 nodejs 操作 mysql 数据库</h3>\n<ul>\n<li>安装命令  <code>npm init -y</code></li>\n<li>安装命令  <code>npm i mysql --registry=https://registry.npm.taobao.org</code></li>\n</ul>\n<hr />\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建链接对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> con <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    user<span class=\"token operator\">:</span> <span class=\"token string\">'账号'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    password<span class=\"token operator\">:</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    database<span class=\"token operator\">:</span> <span class=\"token string\">'数据库名'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 开始连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> sql <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mysql操作命令</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 异步操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 关闭连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>con<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "mysql",
                "javascript",
                "nodejs",
                "mysql",
                "数据库"
            ]
        }
    ]
}